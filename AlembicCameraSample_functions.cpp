////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicCameraSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at CameraSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicCameraSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_construct")

  construct_AbcBasePtr(AbcG::CameraSample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_construct")
}

// Defined at CameraSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicCameraSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_free")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::CameraSample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_free")
}

// Defined at CameraSample.kl:12:1
FABRIC_EXT_EXPORT void AlembicCameraSample_construct4Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam top,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam bottom,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam left,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam right
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_construct4Args")

  double abcTop = 0;
  if(!conv_from_baseType<KL::Float64, double>(top, abcTop)){
    setError("Error in AlembicCameraSample_construct4Args. unable to convert: top");
    return;
  }
  double abcBottom = 0;
  if(!conv_from_baseType<KL::Float64, double>(bottom, abcBottom)){
    setError("Error in AlembicCameraSample_construct4Args. unable to convert: bottom");
    return;
  }
  double abcLeft = 0;
  if(!conv_from_baseType<KL::Float64, double>(left, abcLeft)){
    setError("Error in AlembicCameraSample_construct4Args. unable to convert: left");
    return;
  }
  double abcRight = 0;
  if(!conv_from_baseType<KL::Float64, double>(right, abcRight)){
    setError("Error in AlembicCameraSample_construct4Args. unable to convert: right");
    return;
  }
  this_->handle = new PtrHandle<AbcG::CameraSample>(new AbcG::CameraSample(abcTop, abcBottom, abcLeft, abcRight), true);
  
  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_construct4Args")
}

// Defined at CameraSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicCameraSample_getScreenWindow(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::IOParam top,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::IOParam bottom,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::IOParam left,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::IOParam right
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getScreenWindow")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getScreenWindow. unable to convert: this_");
    return;
  }
  double abcTop = 0;
  if(!conv_from_baseType<KL::Float64, double>(top, abcTop)){
    setError("Error in AlembicCameraSample_getScreenWindow. unable to convert: top");
    return;
  }
  double abcBottom = 0;
  if(!conv_from_baseType<KL::Float64, double>(bottom, abcBottom)){
    setError("Error in AlembicCameraSample_getScreenWindow. unable to convert: bottom");
    return;
  }
  double abcLeft = 0;
  if(!conv_from_baseType<KL::Float64, double>(left, abcLeft)){
    setError("Error in AlembicCameraSample_getScreenWindow. unable to convert: left");
    return;
  }
  double abcRight = 0;
  if(!conv_from_baseType<KL::Float64, double>(right, abcRight)){
    setError("Error in AlembicCameraSample_getScreenWindow. unable to convert: right");
    return;
  }
  abcThis_->getScreenWindow(abcTop, abcBottom, abcLeft, abcRight);
  conv_to_baseType<KL::Float64, double>(abcTop, top);
  conv_to_baseType<KL::Float64, double>(abcBottom, bottom);
  conv_to_baseType<KL::Float64, double>(abcLeft, left);
  conv_to_baseType<KL::Float64, double>(abcRight, right);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_getScreenWindow")
}

// Defined at CameraSample.kl:15:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getFocalLength(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getFocalLength")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getFocalLength. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getFocalLength();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getFocalLength", 0)
}

// Defined at CameraSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setFocalLength(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setFocalLength")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setFocalLength. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setFocalLength. unable to convert: value");
    return;
  }
  abcThis_->setFocalLength(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setFocalLength")
}

// Defined at CameraSample.kl:17:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getHorizontalAperture(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getHorizontalAperture")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getHorizontalAperture. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getHorizontalAperture();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getHorizontalAperture", 0)
}

// Defined at CameraSample.kl:18:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setHorizontalAperture(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setHorizontalAperture")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setHorizontalAperture. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setHorizontalAperture. unable to convert: value");
    return;
  }
  abcThis_->setHorizontalAperture(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setHorizontalAperture")
}

// Defined at CameraSample.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getHorizontalFilmOffset(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getHorizontalFilmOffset")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getHorizontalFilmOffset. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getHorizontalFilmOffset();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getHorizontalFilmOffset", 0)
}

// Defined at CameraSample.kl:20:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setHorizontalFilmOffset(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setHorizontalFilmOffset")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setHorizontalFilmOffset. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setHorizontalFilmOffset. unable to convert: value");
    return;
  }
  abcThis_->setHorizontalFilmOffset(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setHorizontalFilmOffset")
}

// Defined at CameraSample.kl:21:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getVerticalAperture(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getVerticalAperture")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getVerticalAperture. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getVerticalAperture();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getVerticalAperture", 0)
}

// Defined at CameraSample.kl:22:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setVerticalAperture(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setVerticalAperture")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setVerticalAperture. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setVerticalAperture. unable to convert: value");
    return;
  }
  abcThis_->setVerticalAperture(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setVerticalAperture")
}

// Defined at CameraSample.kl:23:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getVerticalFilmOffset(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getVerticalFilmOffset")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getVerticalFilmOffset. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getVerticalFilmOffset();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getVerticalFilmOffset", 0)
}

// Defined at CameraSample.kl:24:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setVerticalFilmOffset(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setVerticalFilmOffset")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setVerticalFilmOffset. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setVerticalFilmOffset. unable to convert: value");
    return;
  }
  abcThis_->setVerticalFilmOffset(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setVerticalFilmOffset")
}

// Defined at CameraSample.kl:25:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getLensSqueezeRatio(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getLensSqueezeRatio")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getLensSqueezeRatio. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getLensSqueezeRatio();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getLensSqueezeRatio", 0)
}

// Defined at CameraSample.kl:26:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setLensSqueezeRatio(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setLensSqueezeRatio")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setLensSqueezeRatio. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setLensSqueezeRatio. unable to convert: value");
    return;
  }
  abcThis_->setLensSqueezeRatio(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setLensSqueezeRatio")
}

// Defined at CameraSample.kl:27:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getOverScanLeft(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getOverScanLeft")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getOverScanLeft. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getOverScanLeft();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getOverScanLeft", 0)
}

// Defined at CameraSample.kl:28:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setOverScanLeft(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setOverScanLeft")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setOverScanLeft. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setOverScanLeft. unable to convert: value");
    return;
  }
  abcThis_->setOverScanLeft(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setOverScanLeft")
}

// Defined at CameraSample.kl:29:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getOverScanRight(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getOverScanRight")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getOverScanRight. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getOverScanRight();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getOverScanRight", 0)
}

// Defined at CameraSample.kl:30:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setOverScanRight(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setOverScanRight")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setOverScanRight. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setOverScanRight. unable to convert: value");
    return;
  }
  abcThis_->setOverScanRight(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setOverScanRight")
}

// Defined at CameraSample.kl:31:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getOverScanTop(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getOverScanTop")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getOverScanTop. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getOverScanTop();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getOverScanTop", 0)
}

// Defined at CameraSample.kl:32:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setOverScanTop(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setOverScanTop")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setOverScanTop. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setOverScanTop. unable to convert: value");
    return;
  }
  abcThis_->setOverScanTop(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setOverScanTop")
}

// Defined at CameraSample.kl:33:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getOverScanBottom(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getOverScanBottom")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getOverScanBottom. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getOverScanBottom();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getOverScanBottom", 0)
}

// Defined at CameraSample.kl:34:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setOverScanBottom(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setOverScanBottom")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setOverScanBottom. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setOverScanBottom. unable to convert: value");
    return;
  }
  abcThis_->setOverScanBottom(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setOverScanBottom")
}

// Defined at CameraSample.kl:35:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getFStop(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getFStop")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getFStop. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getFStop();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getFStop", 0)
}

// Defined at CameraSample.kl:36:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setFStop(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setFStop")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setFStop. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setFStop. unable to convert: value");
    return;
  }
  abcThis_->setFStop(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setFStop")
}

// Defined at CameraSample.kl:37:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getFocusDistance(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getFocusDistance")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getFocusDistance. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getFocusDistance();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getFocusDistance", 0)
}

// Defined at CameraSample.kl:38:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setFocusDistance(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setFocusDistance")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setFocusDistance. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setFocusDistance. unable to convert: value");
    return;
  }
  abcThis_->setFocusDistance(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setFocusDistance")
}

// Defined at CameraSample.kl:39:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getShutterOpen(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getShutterOpen")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getShutterOpen. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getShutterOpen();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getShutterOpen", 0)
}

// Defined at CameraSample.kl:40:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setShutterOpen(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setShutterOpen")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setShutterOpen. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setShutterOpen. unable to convert: value");
    return;
  }
  abcThis_->setShutterOpen(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setShutterOpen")
}

// Defined at CameraSample.kl:41:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getShutterClose(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getShutterClose")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getShutterClose. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getShutterClose();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getShutterClose", 0)
}

// Defined at CameraSample.kl:42:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setShutterClose(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setShutterClose")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setShutterClose. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setShutterClose. unable to convert: value");
    return;
  }
  abcThis_->setShutterClose(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setShutterClose")
}

// Defined at CameraSample.kl:43:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getNearClippingPlane(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getNearClippingPlane")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getNearClippingPlane. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getNearClippingPlane();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getNearClippingPlane", 0)
}

// Defined at CameraSample.kl:44:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setNearClippingPlane(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setNearClippingPlane")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setNearClippingPlane. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setNearClippingPlane. unable to convert: value");
    return;
  }
  abcThis_->setNearClippingPlane(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setNearClippingPlane")
}

// Defined at CameraSample.kl:45:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getFarClippingPlane(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getFarClippingPlane")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getFarClippingPlane. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getFarClippingPlane();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getFarClippingPlane", 0)
}

// Defined at CameraSample.kl:46:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setFarClippingPlane(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Float64 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setFarClippingPlane")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setFarClippingPlane. unable to convert: this_");
    return;
  }
  double abcValue = 0;
  if(!conv_from_baseType<KL::Float64, double>(value, abcValue)){
    setError("Error in AlembicCameraSample_setFarClippingPlane. unable to convert: value");
    return;
  }
  abcThis_->setFarClippingPlane(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setFarClippingPlane")
}

// Defined at CameraSample.kl:47:1
FABRIC_EXT_EXPORT void AlembicCameraSample_getChildBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getChildBounds")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getChildBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getChildBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_getChildBounds")
}

// Defined at CameraSample.kl:48:1
FABRIC_EXT_EXPORT void AlembicCameraSample_setChildBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::INParam childBounds
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_setChildBounds")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_setChildBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abcChildBounds;
  if(!conv_from_Box3(childBounds, abcChildBounds)){
    setError("Error in AlembicCameraSample_setChildBounds. unable to convert: childBounds");
    return;
  }
  abcThis_->setChildBounds(abcChildBounds);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_setChildBounds")
}

// Defined at CameraSample.kl:49:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getCoreValue(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getCoreValue")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getCoreValue. unable to convert: this_");
    return 0;
  }
  unsigned int abcIndex = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(index, abcIndex)){
    setError("Error in AlembicCameraSample_getCoreValue. unable to convert: index");
    return 0;
  }
  double abc_result = abcThis_->getCoreValue(abcIndex);
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getCoreValue", 0)
}

// Defined at CameraSample.kl:50:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 AlembicCameraSample_getFieldOfView(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getFieldOfView")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getFieldOfView. unable to convert: this_");
    return 0;
  }
  double abc_result = abcThis_->getFieldOfView();
  KL::Float64 _result;
  conv_to_baseType<KL::Float64, double>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicCameraSample_getFieldOfView", 0)
}

// Defined at CameraSample.kl:51:1
FABRIC_EXT_EXPORT void AlembicCameraSample_getFilmBackMatrix(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat33 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicCameraSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicCameraSample_getFilmBackMatrix")

  AbcG::CameraSample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicCameraSample, AbcG::CameraSample>(this_, abcThis_)){
    setError("Error in AlembicCameraSample_getFilmBackMatrix. unable to convert: this_");
    return;
  }
  Abc::M33d abc_result = abcThis_->getFilmBackMatrix();
  conv_to_Mat33(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicCameraSample_getFilmBackMatrix")
}
