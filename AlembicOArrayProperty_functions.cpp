////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicOArrayProperty_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at OArrayProperty.kl:9:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_construct")
}

// Defined at OArrayProperty.kl:10:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_free")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(Abc::OArrayProperty)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_free")
}

// Defined at OArrayProperty.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOArrayProperty_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_valid")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_valid", false)
}

// Defined at OArrayProperty.kl:14:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getHeader(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicPropertyHeader >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getHeader")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getHeader. unable to convert: this_");
    return;
  }
  AlembicPropertyGetHeader()
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getHeader")
}

// Defined at OArrayProperty.kl:15:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getName")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getName. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->getName();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getName")
}

// Defined at OArrayProperty.kl:16:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicOArrayProperty_getPropertyType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getPropertyType")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getPropertyType. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getPropertyType();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_getPropertyType", 0)
}

// Defined at OArrayProperty.kl:17:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOArrayProperty_isScalar(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_isScalar")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_isScalar. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isScalar();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_isScalar", false)
}

// Defined at OArrayProperty.kl:18:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOArrayProperty_isArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_isArray")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_isArray. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isArray();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_isArray", false)
}

// Defined at OArrayProperty.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOArrayProperty_isCompound(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_isCompound")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_isCompound. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isCompound();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_isCompound", false)
}

// Defined at OArrayProperty.kl:20:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOArrayProperty_isSimple(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_isSimple")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_isSimple. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isSimple();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_isSimple", false)
}

// Defined at OArrayProperty.kl:21:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getMetaData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getMetaData")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getMetaData. unable to convert: this_");
    return;
  }
  AlembicGetMetaData()
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getMetaData")
}

// Defined at OArrayProperty.kl:22:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getDataType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicDataType >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getDataType")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getDataType. unable to convert: this_");
    return;
  }
  Abc::DataType abc_result = abcThis_->getDataType();
  conv_to_AbcBase<KL::AlembicDataType, Abc::DataType>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getDataType")
}

// Defined at OArrayProperty.kl:23:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getTimeSampling")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getTimeSampling")
}

// Defined at OArrayProperty.kl:24:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getObject(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getObject")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getObject. unable to convert: this_");
    return;
  }
  Abc::OObject* abc_result = new Abc::OObject(abcThis_->getObject());
  conv_to_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getObject")
}

// Defined at OArrayProperty.kl:26:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_construct3Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCompoundProperty >::INParam parent,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicDataType >::INParam dataType
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_construct3Args")

  Abc::OCompoundProperty* abcParent = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOCompoundProperty, Abc::OCompoundProperty>(parent, abcParent)){
    setError("Error in AlembicOArrayProperty_construct3Args. unable to convert: parent");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOArrayProperty_construct3Args. unable to convert: name");
    return;
  }
  Abc::DataType abcDataType;
  if(!conv_from_AbcBase<KL::AlembicDataType, Abc::DataType>(dataType, abcDataType)){
    setError("Error in AlembicOArrayProperty_construct3Args. unable to convert: dataType");
    return;
  }

  Abc::OArrayProperty * abcThis_ = new Abc::OArrayProperty(*abcParent, abcName, abcDataType);
  this_->handle = new PtrHandle<Abc::OArrayProperty>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_construct3Args")
}

// Defined at OArrayProperty.kl:28:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicOArrayProperty_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getNumSamples")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOArrayProperty_getNumSamples", 0)
}

// Defined at OArrayProperty.kl:29:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_getParent(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_getParent")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_getParent. unable to convert: this_");
    return;
  }
  Abc::OCompoundProperty* abc_result = new Abc::OCompoundProperty(abcThis_->getParent());
  conv_to_AbcBasePtr<KL::AlembicOCompoundProperty, Abc::OCompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_getParent")
}

// Defined at OArrayProperty.kl:30:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setTimeSampling")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setTimeSampling. unable to convert: this_");
    return;
  }
  unsigned int abcIndex = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(index, abcIndex)){
    setError("Error in AlembicOArrayProperty_setTimeSampling. unable to convert: index");
    return;
  }
  abcThis_->setTimeSampling(abcIndex);

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setTimeSampling")
}

// Defined at OArrayProperty.kl:32:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setFromPrevious(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setFromPrevious")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setFromPrevious. unable to convert: this_");
    return;
  }
  abcThis_->setFromPrevious();

  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setFromPrevious")
}

// Defined at OArrayProperty.kl:33:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsBoolean(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Boolean > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsBoolean")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsBoolean. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(Boolean, kBooleanPOD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsBoolean")
}

// Defined at OArrayProperty.kl:34:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsUInt8(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt8 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsUInt8")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsUInt8. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(UInt8, kUint8POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsUInt8")
}

// Defined at OArrayProperty.kl:35:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsSInt8(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt8 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsSInt8")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsSInt8. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(SInt8, kInt8POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsSInt8")
}

// Defined at OArrayProperty.kl:36:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsUInt16(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt16 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsUInt16")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsUInt16. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(UInt16, kUint16POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsUInt16")
}

// Defined at OArrayProperty.kl:37:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsSInt16(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt16 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsSInt16")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsSInt16. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(SInt16, kInt16POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsSInt16")
}

// Defined at OArrayProperty.kl:38:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsUInt32(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsUInt32")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsUInt32. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(UInt32, kUint32POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsUInt32")
}

// Defined at OArrayProperty.kl:39:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsSInt32(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsSInt32")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsSInt32. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(SInt32, kInt32POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsSInt32")
}

// Defined at OArrayProperty.kl:40:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsUInt64(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt64 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsUInt64")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsUInt64. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(UInt64, kUint64POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsUInt64")
}

// Defined at OArrayProperty.kl:41:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsSInt64(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt64 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsSInt64")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsSInt64. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(SInt64, kInt64POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsSInt64")
}

// Defined at OArrayProperty.kl:42:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsFloat16(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsFloat16")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsFloat16. unable to convert: this_");
    return;
  }

  const Abc::PropertyHeader & header = abcThis_->getHeader();
  if(header.getDataType().getExtent() == 0)
    return;
  if(header.getDataType().getPod() != Abc::kFloat16POD)
    FABRIC_EXT_SETERROR_AND_RETURN("AlembicOArrayProperty_setAsFloat16: DataType.pod() not kFloat16POD.");
  if(values.size() == 0)
    abcThis_->set(Abc::ArraySample());
  else
    abcThis_->set(Abc::ArraySample(&values[0], header.getDataType(), AbcU::Dimensions(values.size())));
    
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsFloat16")
}

// Defined at OArrayProperty.kl:43:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsFloat32(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsFloat32")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsFloat32. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(Float32, kFloat32POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsFloat32")
}

// Defined at OArrayProperty.kl:44:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsFloat64(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float64 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsFloat64")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsFloat64. unable to convert: this_");
    return;
  }
  AlembicOArrayPropertySetExport(Float64, kFloat64POD)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsFloat64")
}

// Defined at OArrayProperty.kl:45:1
FABRIC_EXT_EXPORT void AlembicOArrayProperty_setAsString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArrayProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::String > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOArrayProperty_setAsString")

  Abc::OArrayProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOArrayProperty, Abc::OArrayProperty>(this_, abcThis_)){
    setError("Error in AlembicOArrayProperty_setAsString. unable to convert: this_");
    return;
  }

  const Abc::PropertyHeader & header = abcThis_->getHeader();
  if(header.getDataType().getExtent() == 0)
    return;
  if(values.size() == 0)
    abcThis_->set(Abc::ArraySample());
  else if(header.getDataType().getPod() == Abc::kStringPOD)
  {
    std::vector<std::string> strings(values.size());
    for(size_t i=0;i<strings.size();i++)
      strings[i] = values[i].data();
    abcThis_->set(Abc::ArraySample(&strings[0], header.getDataType(), AbcU::Dimensions(strings.size())));
  }
  else if(header.getDataType().getPod() == Abc::kWstringPOD)
  {
    std::vector<std::wstring> wstrings(values.size());
    for(size_t i=0;i<wstrings.size();i++)
    {
      std::string s = values[i].data();
      for(size_t j=0;j<s.length();j++)
        wstrings[i] += s[j];
    }
    abcThis_->set(Abc::ArraySample(&wstrings[0], header.getDataType(), AbcU::Dimensions(wstrings.size())));
  }
  else
    FABRIC_EXT_SETERROR_AND_RETURN("AlembicOArrayProperty_setAsString: DataType.pod() not kStringPOD.");
    
  ALEMBIC_CATCH_STATEMENT("AlembicOArrayProperty_setAsString")
}
