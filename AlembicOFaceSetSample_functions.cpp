////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicOFaceSetSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at OFaceSetSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_construct")

  construct_AbcBasePtr(AbcG::OFaceSetSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_construct")
}

// Defined at OFaceSetSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_free")

  AbcG::OFaceSetSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOFaceSetSample, AbcG::OFaceSetSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::OFaceSetSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_free")
}

// Defined at OFaceSetSample.kl:12:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_constructFromFaces(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam faces
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_constructFromFaces")


  Abc::TypedArraySample<Abc::Int32TPTraits> abcFaces;
  if(faces.size() > 0)
    abcFaces = Abc::TypedArraySample<Abc::Int32TPTraits>((const Abc::int32_t *)&faces[0], faces.size());
  this_->handle = new PtrHandle<AbcG::OFaceSetSchema::Sample>(new AbcG::OFaceSetSchema::Sample(abcFaces), true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_constructFromFaces")
}

// Defined at OFaceSetSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_getFaces(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_getFaces")

  AbcG::OFaceSetSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOFaceSetSample, AbcG::OFaceSetSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOFaceSetSample_getFaces. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getFaces)
  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_getFaces")
}

// Defined at OFaceSetSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_setFaces(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_setFaces")

  AbcG::OFaceSetSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOFaceSetSample, AbcG::OFaceSetSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOFaceSetSample_setFaces. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, Abc::int32_t, setFaces)
  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_setFaces")
}

// Defined at OFaceSetSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_getSelfBounds")

  AbcG::OFaceSetSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOFaceSetSample, AbcG::OFaceSetSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOFaceSetSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_getSelfBounds")
}

// Defined at OFaceSetSample.kl:17:1
FABRIC_EXT_EXPORT void AlembicOFaceSetSample_setSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSetSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::INParam bounds
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOFaceSetSample_setSelfBounds")

  AbcG::OFaceSetSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOFaceSetSample, AbcG::OFaceSetSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOFaceSetSample_setSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abcBounds;
  if(!conv_from_Box3(bounds, abcBounds)){
    setError("Error in AlembicOFaceSetSample_setSelfBounds. unable to convert: bounds");
    return;
  }
  abcThis_->setSelfBounds(abcBounds);

  ALEMBIC_CATCH_STATEMENT("AlembicOFaceSetSample_setSelfBounds")
}
