////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicI__KLTYPE____PRECISION__GeomParam_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:15:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_construct")

  this_->handle = NULL;

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_construct")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:18:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_free")

  free_AbcBasePtr(AbcG::ITypedGeomParam<__ABCTRAITS__>)

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_free")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicI__KLTYPE____PRECISION__GeomParam_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_valid")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    return false;
  }

  return abcThis_->valid();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_valid", false)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:22:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_construct2Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam parent,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_construct2Args")

  Abc::ICompoundProperty * abcParent = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(parent, abcParent)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_construct2Args. unable to convert: parent");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_construct2Args. unable to convert: name");
    return;
  }

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = new AbcG::ITypedGeomParam<__ABCTRAITS__>(*abcParent, abcName);
  if(!abcThis_->valid())
    return;
  this_->handle = new PtrHandle< AbcG::ITypedGeomParam<__ABCTRAITS__> >(abcThis_, true);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_construct2Args")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:24:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicI__KLTYPE____PRECISION__GeomParam_matches(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicPropertyHeader >::INParam header
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_matches")

  Abc::PropertyHeader * abcHeader;
  if(!conv_from_AbcBasePtr<KL::AlembicPropertyHeader, Abc::PropertyHeader>(header, abcHeader)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_matches. unable to convert: header");
    return false;
  }

  return AbcG::ITypedGeomParam<__ABCTRAITS__>::matches(*abcHeader);

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_matches", false)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:25:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getIndexed(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam ss
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getIndexed")

  Abc::ISampleSelector * abcSs = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(ss, abcSs)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getIndexed. unable to convert: ss");
    return;
  }

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getIndexed. unable to convert: this_");
    return;
  }

  AbcG::ITypedGeomParam<__ABCTRAITS__>::Sample * abc_result = new AbcG::ITypedGeomParam<__ABCTRAITS__>::Sample();
  abcThis_->getIndexed(*abc_result, *abcSs);

  conv_to_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParamSample, AbcG::ITypedGeomParam<__ABCTRAITS__>::Sample>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getIndexed")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:27:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getExpanded(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam ss
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getExpanded")

  Abc::ISampleSelector * abcSs = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(ss, abcSs)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getExpanded. unable to convert: ss");
    return;
  }

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getNumSamples. unable to convert: this_");
    return;
  }

  AbcG::ITypedGeomParam<__ABCTRAITS__>::Sample * abc_result = new AbcG::ITypedGeomParam<__ABCTRAITS__>::Sample();
  abcThis_->getExpanded(*abc_result, *abcSs);

  conv_to_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParamSample, AbcG::ITypedGeomParam<__ABCTRAITS__>::Sample>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getExpanded")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:29:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicI__KLTYPE____PRECISION__GeomParam_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getNumSamples")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getNumSamples. unable to convert: this_");
    return 0;
  }

  return abcThis_->getNumSamples();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_getNumSamples", 0)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:30:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getDataType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicDataType >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getDataType")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getDataType. unable to convert: this_");
    return;
  }

  Abc::DataType abc_result = abcThis_->getDataType();
  conv_to_AbcBase<KL::AlembicDataType, Abc::DataType>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getDataType")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:31:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicI__KLTYPE____PRECISION__GeomParam_getArrayExtent(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getArrayExtent")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getArrayExtent. unable to convert: this_");
    return 0;
  }

  return abcThis_->getArrayExtent();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_getArrayExtent", 0)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:32:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicI__KLTYPE____PRECISION__GeomParam_isIndexed(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_isIndexed")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_isIndexed. unable to convert: this_");
    return false;
  }

  return abcThis_->isIndexed();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_isIndexed", false)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:33:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicI__KLTYPE____PRECISION__GeomParam_getScope(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getScope")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getScope. unable to convert: this_");
    return 0;
  }

  return abcThis_->getScope();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_getScope", 0)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:34:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getTimeSampling")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getTimeSampling. unable to convert: this_");
    return;
  }

  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getTimeSampling")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:35:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getName")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getName. unable to convert: this_");
    return;
  }

  _result = abcThis_->getName().c_str();

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getName")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:36:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getParent(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getParent")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getParent. unable to convert: this_");
    return;
  }

  Abc::ICompoundProperty * abc_result = new Abc::ICompoundProperty(abcThis_->getParent());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getParent")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:37:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicI__KLTYPE____PRECISION__GeomParam_isConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_isConstant")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_isConstant. unable to convert: this_");
    return false;
  }

  return abcThis_->isConstant();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicI__KLTYPE____PRECISION__GeomParam_isConstant", false)
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:38:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getValueProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getValueProperty")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getValueProperty. unable to convert: this_");
    return;
  }

  Abc::IArrayProperty * abc_result = new Abc::IArrayProperty(abcThis_->getValueProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getValueProperty")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/I__KLTYPE__GeomParam.kl:39:1
FABRIC_EXT_EXPORT void AlembicI__KLTYPE____PRECISION__GeomParam_getIndexProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicI__KLTYPE____PRECISION__GeomParam >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getIndexProperty")

  AbcG::ITypedGeomParam<__ABCTRAITS__> * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicI__KLTYPE____PRECISION__GeomParam, AbcG::ITypedGeomParam<__ABCTRAITS__> >(this_, abcThis_)){
    setError("Error in AlembicI__KLTYPE____PRECISION__GeomParam_getIndexProperty. unable to convert: this_");
    return;
  }

  Abc::IArrayProperty * abc_result = new Abc::IArrayProperty(abcThis_->getIndexProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicI__KLTYPE____PRECISION__GeomParam_getIndexProperty")
}

