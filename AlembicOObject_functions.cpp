////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicOObject_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at OObject.kl:9:1
FABRIC_EXT_EXPORT void AlembicOObject_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_construct")
}

// Defined at OObject.kl:10:1
FABRIC_EXT_EXPORT void AlembicOObject_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_free")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(Abc::OObject)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_free")
}

// Defined at OObject.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOObject_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_valid")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOObject_valid", false)
}

// Defined at OObject.kl:14:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFrom2Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam parent,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFrom2Args")

  Abc::OObject* abcParent = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(parent, abcParent)){
    setError("Error in AlembicOObject_constructFrom2Args. unable to convert: parent");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOObject_constructFrom2Args. unable to convert: name");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcParent, abcName);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFrom2Args")
}

// Defined at OObject.kl:16:1
FABRIC_EXT_EXPORT void AlembicOObject_getName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getName")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getName. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->getName();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getName")
}

// Defined at OObject.kl:17:1
FABRIC_EXT_EXPORT void AlembicOObject_getFullName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getFullName")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getFullName. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->getFullName();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getFullName")
}

// Defined at OObject.kl:18:1
FABRIC_EXT_EXPORT void AlembicOObject_getMetaData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getMetaData")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getMetaData. unable to convert: this_");
    return;
  }
  AlembicGetMetaData()
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getMetaData")
}

// Defined at OObject.kl:19:1
FABRIC_EXT_EXPORT void AlembicOObject_getArchive(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOArchive >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getArchive")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getArchive. unable to convert: this_");
    return;
  }
  Abc::OArchive* abc_result = new Abc::OArchive(abcThis_->getArchive());
  conv_to_AbcBasePtr<KL::AlembicOArchive, Abc::OArchive>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getArchive")
}

// Defined at OObject.kl:20:1
FABRIC_EXT_EXPORT void AlembicOObject_getParent(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getParent")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getParent. unable to convert: this_");
    return;
  }
  Abc::OObject* abc_result = new Abc::OObject(abcThis_->getParent());
  conv_to_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getParent")
}

// Defined at OObject.kl:21:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicOObject_getNumChildren(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getNumChildren")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getNumChildren. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumChildren();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOObject_getNumChildren", 0)
}

// Defined at OObject.kl:22:1
FABRIC_EXT_EXPORT void AlembicOObject_getProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getProperties")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getProperties. unable to convert: this_");
    return;
  }
  Abc::OCompoundProperty* abc_result = new Abc::OCompoundProperty(abcThis_->getProperties());
  conv_to_AbcBasePtr<KL::AlembicOCompoundProperty, Abc::OCompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getProperties")
}

// Defined at OObject.kl:23:1
FABRIC_EXT_EXPORT void AlembicOObject_getChild(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam childIndex
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getChild")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getChild. unable to convert: this_");
    return;
  }
  unsigned int abcChildIndex = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(childIndex, abcChildIndex)){
    setError("Error in AlembicOObject_getChild. unable to convert: childIndex");
    return;
  }
  Abc::OObject* abc_result = new Abc::OObject(abcThis_->getChild(abcChildIndex));
  conv_to_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getChild")
}

// Defined at OObject.kl:24:1
FABRIC_EXT_EXPORT void AlembicOObject_getChild_byName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam childName
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_getChild_byName")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_getChild_byName. unable to convert: this_");
    return;
  }
  std::string abcChildName = "";
  if(!conv_from_String(childName, abcChildName)){
    setError("Error in AlembicOObject_getChild_byName. unable to convert: childName");
    return;
  }
  Abc::OObject* abc_result = new Abc::OObject(abcThis_->getChild(abcChildName));
  conv_to_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_getChild_byName")
}

// Defined at OObject.kl:25:1
FABRIC_EXT_EXPORT void AlembicOObject_addChildInstance(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::INParam target,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_addChildInstance")

  Abc::OObject* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(this_, abcThis_)){
    setError("Error in AlembicOObject_addChildInstance. unable to convert: this_");
    return;
  }
  Abc::OObject* abcTarget = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOObject, Abc::OObject>(target, abcTarget)){
    setError("Error in AlembicOObject_addChildInstance. unable to convert: target");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOObject_addChildInstance. unable to convert: name");
    return;
  }
  abcThis_->addChildInstance(*abcTarget, abcName);

  ALEMBIC_CATCH_STATEMENT("AlembicOObject_addChildInstance")
}

// Defined at OXform.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOXform(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOXform >::INParam xform
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOXform")

  AbcG::OXform* abcXform = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOXform, AbcG::OXform>(xform, abcXform)){
    setError("Error in AlembicOObject_constructFromOXform. unable to convert: xform");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcXform, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOXform")
}

// Defined at OCamera.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOCamera(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCamera >::INParam camera
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOCamera")

  AbcG::OCamera* abcCamera = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOCamera, AbcG::OCamera>(camera, abcCamera)){
    setError("Error in AlembicOObject_constructFromOCamera. unable to convert: camera");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcCamera, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOCamera")
}

// Defined at OLight.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOLight(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOLight >::INParam light
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOLight")

  AbcG::OLight* abcLight = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOLight, AbcG::OLight>(light, abcLight)){
    setError("Error in AlembicOObject_constructFromOLight. unable to convert: light");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcLight, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOLight")
}

// Defined at OPoints.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOPoints(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPoints >::INParam points
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOPoints")

  AbcG::OPoints* abcPoints = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPoints, AbcG::OPoints>(points, abcPoints)){
    setError("Error in AlembicOObject_constructFromOPoints. unable to convert: points");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcPoints, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOPoints")
}

// Defined at OPolyMesh.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOPolyMesh(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMesh >::INParam polyMesh
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOPolyMesh")

  AbcG::OPolyMesh* abcPolyMesh = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMesh, AbcG::OPolyMesh>(polyMesh, abcPolyMesh)){
    setError("Error in AlembicOObject_constructFromOPolyMesh. unable to convert: polyMesh");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcPolyMesh, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOPolyMesh")
}

// Defined at OCurves.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOCurves(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCurves >::INParam curves
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOCurves")

  AbcG::OCurves* abcCurves = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOCurves, AbcG::OCurves>(curves, abcCurves)){
    setError("Error in AlembicOObject_constructFromOCurves. unable to convert: curves");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcCurves, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOCurves")
}

// Defined at ONuPatch.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromONuPatch(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatch >::INParam patch
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromONuPatch")

  AbcG::ONuPatch* abcPatch = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatch, AbcG::ONuPatch>(patch, abcPatch)){
    setError("Error in AlembicOObject_constructFromONuPatch. unable to convert: patch");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcPatch, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromONuPatch")
}

// Defined at OSubD.kl:15:1
FABRIC_EXT_EXPORT void AlembicOObject_constructFromOSubD(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOObject >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubD >::INParam subd
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOObject_constructFromOSubD")

  AbcG::OSubD* abcSubd = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubD, AbcG::OSubD>(subd, abcSubd)){
    setError("Error in AlembicOObject_constructFromOSubD. unable to convert: subd");
    return;
  }

  Abc::OObject * abcThis_ = new Abc::OObject(*abcSubd, Abc::kWrapExisting);
  this_->handle = new PtrHandle<Abc::OObject>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOObject_constructFromOSubD")
}
