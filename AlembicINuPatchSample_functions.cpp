////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicINuPatchSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at INuPatchSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_construct")

  construct_AbcBasePtr(AbcG::INuPatchSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_construct")
}

// Defined at INuPatchSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_free")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::INuPatchSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_free")
}

// Defined at INuPatchSample.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSample_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_valid")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_valid", false)
}

// Defined at INuPatchSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getPositions")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getPositions. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::P3fArraySamplePtr, KL::Vec3, getPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getPositions")
}

// Defined at INuPatchSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getPositionWeights(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getPositionWeights")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getPositionWeights. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getPositionWeights)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getPositionWeights")
}

// Defined at INuPatchSample.kl:16:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicINuPatchSample_getNumU(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getNumU")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getNumU. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getNumU();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_getNumU", 0)
}

// Defined at INuPatchSample.kl:17:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicINuPatchSample_getNumV(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getNumV")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getNumV. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getNumV();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_getNumV", 0)
}

// Defined at INuPatchSample.kl:18:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicINuPatchSample_getUOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getUOrder")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getUOrder. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getUOrder();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_getUOrder", 0)
}

// Defined at INuPatchSample.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicINuPatchSample_getVOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getVOrder")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getVOrder. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getVOrder();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_getVOrder", 0)
}

// Defined at INuPatchSample.kl:20:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getUKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getUKnot")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getUKnot. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getUKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getUKnot")
}

// Defined at INuPatchSample.kl:21:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getVKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getVKnot")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getVKnot. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getVKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getVKnot")
}

// Defined at INuPatchSample.kl:22:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getSelfBounds")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getSelfBounds")
}

// Defined at INuPatchSample.kl:23:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getVelocities")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getVelocities. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::V3fArraySamplePtr, KL::Vec3, getVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getVelocities")
}

// Defined at INuPatchSample.kl:24:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicINuPatchSample_getTrimNumLoops(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimNumLoops")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimNumLoops. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getTrimNumLoops();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_getTrimNumLoops", 0)
}

// Defined at INuPatchSample.kl:25:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimNumCurves(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimNumCurves")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimNumCurves. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::Int32ArraySamplePtr, KL::SInt32, getTrimNumCurves)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimNumCurves")
}

// Defined at INuPatchSample.kl:26:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimNumVertices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimNumVertices")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimNumVertices. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::Int32ArraySamplePtr, KL::SInt32, getTrimNumVertices)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimNumVertices")
}

// Defined at INuPatchSample.kl:27:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimOrders(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimOrders")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimOrders. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::Int32ArraySamplePtr, KL::SInt32, getTrimOrders)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimOrders")
}

// Defined at INuPatchSample.kl:28:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimKnots(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimKnots")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimKnots. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getTrimKnots)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimKnots")
}

// Defined at INuPatchSample.kl:29:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimMins(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimMins")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimMins. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getTrimMins)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimMins")
}

// Defined at INuPatchSample.kl:30:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimMaxes(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimMaxes")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimMaxes. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getTrimMaxes)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimMaxes")
}

// Defined at INuPatchSample.kl:31:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimU(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimU")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimU. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getTrimU)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimU")
}

// Defined at INuPatchSample.kl:32:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimV(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimV")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimV. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getTrimV)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimV")
}

// Defined at INuPatchSample.kl:33:1
FABRIC_EXT_EXPORT void AlembicINuPatchSample_getTrimW(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_getTrimW")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_getTrimW. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::FloatArraySamplePtr, KL::Float32, getTrimW)
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSample_getTrimW")
}

// Defined at INuPatchSample.kl:34:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSample_hasTrimCurve(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSample_hasTrimCurve")

  AbcG::INuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSample_hasTrimCurve. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->hasTrimCurve();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSample_hasTrimCurve", false)
}
