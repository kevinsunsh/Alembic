////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicOPolyMeshSchema_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at OPolyMeshSchema.kl:9:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_construct")
}

// Defined at OPolyMeshSchema.kl:10:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_free")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::OPolyMeshSchema)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_free")
}

// Defined at OPolyMeshSchema.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOPolyMeshSchema_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_valid")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOPolyMeshSchema_valid", false)
}

// Defined at OPolyMeshSchema.kl:14:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getTimeSampling")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_getTimeSampling")
}

// Defined at OPolyMeshSchema.kl:15:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicOPolyMeshSchema_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getNumSamples")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOPolyMeshSchema_getNumSamples", 0)
}

// Defined at OPolyMeshSchema.kl:16:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_set(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam sample
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_set")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_set. unable to convert: this_");
    return;
  }
  AbcG::OPolyMeshSchema::Sample * abcSample = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(sample, abcSample)){
    setError("Error in AlembicOPolyMeshSchema_set. unable to convert: sample");
    return;
  }
  abcThis_->set(*abcSample);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_set")
}

// Defined at OPolyMeshSchema.kl:17:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_setFromPrevious(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_setFromPrevious")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_setFromPrevious. unable to convert: this_");
    return;
  }
  abcThis_->setFromPrevious();

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_setFromPrevious")
}

// Defined at OPolyMeshSchema.kl:18:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_setTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_setTimeSampling")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_setTimeSampling. unable to convert: this_");
    return;
  }
  unsigned int abcIndex = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(index, abcIndex)){
    setError("Error in AlembicOPolyMeshSchema_setTimeSampling. unable to convert: index");
    return;
  }
  abcThis_->setTimeSampling(abcIndex);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_setTimeSampling")
}

// Defined at OPolyMeshSchema.kl:19:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_getArbGeomParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getArbGeomParams")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getArbGeomParams. unable to convert: this_");
    return;
  }
  Abc::OCompoundProperty* abc_result = new Abc::OCompoundProperty(abcThis_->getArbGeomParams());
  conv_to_AbcBasePtr<KL::AlembicOCompoundProperty, Abc::OCompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_getArbGeomParams")
}

// Defined at OPolyMeshSchema.kl:20:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_getUserProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOCompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getUserProperties")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getUserProperties. unable to convert: this_");
    return;
  }
  Abc::OCompoundProperty* abc_result = new Abc::OCompoundProperty(abcThis_->getUserProperties());
  conv_to_AbcBasePtr<KL::AlembicOCompoundProperty, Abc::OCompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_getUserProperties")
}

// Defined at OPolyMeshSchema.kl:21:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_getChildBoundsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getChildBoundsProperty")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getChildBoundsProperty. unable to convert: this_");
    return;
  }
  Abc::OScalarProperty* abc_result = new Abc::OScalarProperty(abcThis_->getChildBoundsProperty());
  conv_to_AbcBasePtr<KL::AlembicOScalarProperty, Abc::OScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_getChildBoundsProperty")
}

// Defined at OPolyMeshSchema.kl:22:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_createFaceSet(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSet >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_createFaceSet")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_createFaceSet. unable to convert: this_");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOPolyMeshSchema_createFaceSet. unable to convert: name");
    return;
  }
  AbcG::OFaceSet* abc_result = new AbcG::OFaceSet(abcThis_->createFaceSet(abcName));
  conv_to_AbcBasePtr<KL::AlembicOFaceSet, AbcG::OFaceSet>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_createFaceSet")
}

// Defined at OPolyMeshSchema.kl:23:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_getFaceSetNames(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getFaceSetNames")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getFaceSetNames. unable to convert: this_");
    return;
  }

  std::vector<std::string> abc_result;
  abcThis_->getFaceSetNames(abc_result);
  _result.resize(abc_result.size());
  for(size_t i=0;i<abc_result.size();i++)
    _result[i] = abc_result[i].c_str();
    
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_getFaceSetNames")
}

// Defined at OPolyMeshSchema.kl:24:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_getFaceSet(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOFaceSet >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_getFaceSet")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_getFaceSet. unable to convert: this_");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOPolyMeshSchema_getFaceSet. unable to convert: name");
    return;
  }
  AbcG::OFaceSet* abc_result = new AbcG::OFaceSet(abcThis_->getFaceSet(abcName));
  conv_to_AbcBasePtr<KL::AlembicOFaceSet, AbcG::OFaceSet>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_getFaceSet")
}

// Defined at OPolyMeshSchema.kl:25:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicOPolyMeshSchema_hasFaceSet(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_hasFaceSet")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_hasFaceSet. unable to convert: this_");
    return false;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOPolyMeshSchema_hasFaceSet. unable to convert: name");
    return false;
  }
  bool abc_result = abcThis_->hasFaceSet(abcName);
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOPolyMeshSchema_hasFaceSet", false)
}

// Defined at OPolyMeshSchema.kl:26:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSchema_setUVSourceName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSchema >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSchema_setUVSourceName")

  AbcG::OPolyMeshSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSchema, AbcG::OPolyMeshSchema>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSchema_setUVSourceName. unable to convert: this_");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicOPolyMeshSchema_setUVSourceName. unable to convert: name");
    return;
  }
  abcThis_->setUVSourceName(abcName);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSchema_setUVSourceName")
}
