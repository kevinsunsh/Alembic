////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicONuPatchSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at ONuPatchSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_construct")

  construct_AbcBasePtr(AbcG::ONuPatchSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_construct")
}

// Defined at ONuPatchSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_free")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::ONuPatchSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_free")
}

// Defined at ONuPatchSample.kl:12:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getPositions")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getPositions. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::P3fArraySample, KL::Vec3, getPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getPositions")
}

// Defined at ONuPatchSample.kl:13:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setPositions")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setPositions. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::P3fArraySample, Abc::V3f, setPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setPositions")
}

// Defined at ONuPatchSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getPositionWeights(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getPositionWeights")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getPositionWeights. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getPositionWeights)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getPositionWeights")
}

// Defined at ONuPatchSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setPositionWeights(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setPositionWeights")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setPositionWeights. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::FloatArraySample, Abc::float32_t, setPositionWeights)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setPositionWeights")
}

// Defined at ONuPatchSample.kl:16:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicONuPatchSample_getNu(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getNu")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getNu. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getNu();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicONuPatchSample_getNu", 0)
}

// Defined at ONuPatchSample.kl:17:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setNu(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setNu")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setNu. unable to convert: this_");
    return;
  }
  int abcValue = 0;
  if(!conv_from_baseType<KL::SInt32, int>(value, abcValue)){
    setError("Error in AlembicONuPatchSample_setNu. unable to convert: value");
    return;
  }
  abcThis_->setNu(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setNu")
}

// Defined at ONuPatchSample.kl:18:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicONuPatchSample_getNv(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getNv")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getNv. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getNv();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicONuPatchSample_getNv", 0)
}

// Defined at ONuPatchSample.kl:19:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setNv(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setNv")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setNv. unable to convert: this_");
    return;
  }
  int abcValue = 0;
  if(!conv_from_baseType<KL::SInt32, int>(value, abcValue)){
    setError("Error in AlembicONuPatchSample_setNv. unable to convert: value");
    return;
  }
  abcThis_->setNv(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setNv")
}

// Defined at ONuPatchSample.kl:20:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicONuPatchSample_getUOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getUOrder")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getUOrder. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getUOrder();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicONuPatchSample_getUOrder", 0)
}

// Defined at ONuPatchSample.kl:21:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setUOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setUOrder")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setUOrder. unable to convert: this_");
    return;
  }
  int abcValue = 0;
  if(!conv_from_baseType<KL::SInt32, int>(value, abcValue)){
    setError("Error in AlembicONuPatchSample_setUOrder. unable to convert: value");
    return;
  }
  abcThis_->setUOrder(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setUOrder")
}

// Defined at ONuPatchSample.kl:22:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicONuPatchSample_getVOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getVOrder")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getVOrder. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getVOrder();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicONuPatchSample_getVOrder", 0)
}

// Defined at ONuPatchSample.kl:23:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setVOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setVOrder")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setVOrder. unable to convert: this_");
    return;
  }
  int abcValue = 0;
  if(!conv_from_baseType<KL::SInt32, int>(value, abcValue)){
    setError("Error in AlembicONuPatchSample_setVOrder. unable to convert: value");
    return;
  }
  abcThis_->setVOrder(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setVOrder")
}

// Defined at ONuPatchSample.kl:24:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getUKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getUKnot")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getUKnot. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getUKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getUKnot")
}

// Defined at ONuPatchSample.kl:25:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setUKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setUKnot")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setUKnot. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::FloatArraySample, Abc::float32_t, setUKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setUKnot")
}

// Defined at ONuPatchSample.kl:26:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getVKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getVKnot")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getVKnot. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getVKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getVKnot")
}

// Defined at ONuPatchSample.kl:27:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setVKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setVKnot")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setVKnot. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::FloatArraySample, Abc::float32_t, setVKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setVKnot")
}

// Defined at ONuPatchSample.kl:28:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getUVs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec2VfGeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getUVs")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getUVs. unable to convert: this_");
    return;
  }

  AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample * abc_result = new AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample(abcThis_->getUVs());
  conv_to_AbcBasePtr<KL::AlembicOVec2VfGeomParamSample, AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getUVs")
}

// Defined at ONuPatchSample.kl:29:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setUVs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec2VfGeomParamSample >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setUVs")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setUVs. unable to convert: this_");
    return;
  }
  AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample * abcValues = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOVec2VfGeomParamSample, AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample>(values, abcValues)){
    setError("Error in AlembicONuPatchSample_setUVs. unable to convert: values");
    return;
  }
  abcThis_->setUVs(*abcValues);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setUVs")
}

// Defined at ONuPatchSample.kl:30:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getNormals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec3NfGeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getNormals")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getNormals. unable to convert: this_");
    return;
  }

  AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample * abc_result = new AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample(abcThis_->getNormals());
  conv_to_AbcBasePtr<KL::AlembicOVec3NfGeomParamSample, AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getNormals")
}

// Defined at ONuPatchSample.kl:31:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setNormals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec3NfGeomParamSample >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setNormals")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setNormals. unable to convert: this_");
    return;
  }
  AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample * abcValues = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOVec3NfGeomParamSample, AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample>(values, abcValues)){
    setError("Error in AlembicONuPatchSample_setNormals. unable to convert: values");
    return;
  }
  abcThis_->setNormals(*abcValues);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setNormals")
}

// Defined at ONuPatchSample.kl:32:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getSelfBounds")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getSelfBounds")
}

// Defined at ONuPatchSample.kl:33:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::INParam bounds
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setSelfBounds")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abcBounds;
  if(!conv_from_Box3(bounds, abcBounds)){
    setError("Error in AlembicONuPatchSample_setSelfBounds. unable to convert: bounds");
    return;
  }
  abcThis_->setSelfBounds(abcBounds);

  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setSelfBounds")
}

// Defined at ONuPatchSample.kl:34:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getVelocities")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getVelocities. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::V3fArraySample, KL::Vec3, getVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getVelocities")
}

// Defined at ONuPatchSample.kl:35:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setVelocities")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setVelocities. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::V3fArraySample, Abc::V3f, setVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setVelocities")
}

// Defined at ONuPatchSample.kl:36:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_setTrimCurve(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam nLoops,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam nCurves,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam n,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam order,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam knot,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam min,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam max,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam u,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam v,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam w
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_setTrimCurve")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_setTrimCurve. unable to convert: this_");
    return;
  }
  int abcNLoops = 0;
  if(!conv_from_baseType<KL::SInt32, int>(nLoops, abcNLoops)){
    setError("Error in AlembicONuPatchSample_setTrimCurve. unable to convert: nLoops");
    return;
  }

  Abc::Int32ArraySample nCurvesSample;
  if(nCurves.size() > 0)
    nCurvesSample = Abc::Int32ArraySample((const Abc::int32_t *)&nCurves[0], nCurves.size());
  Abc::Int32ArraySample nSample;
  if(n.size() > 0)
    nSample = Abc::Int32ArraySample((const Abc::int32_t *)&n[0], n.size());
  Abc::Int32ArraySample orderSample;
  if(order.size() > 0)
    orderSample = Abc::Int32ArraySample((const Abc::int32_t *)&order[0], order.size());
  Abc::FloatArraySample knotSample;
  if(knot.size() > 0)
    knotSample = Abc::FloatArraySample((const Abc::float32_t *)&knot[0], knot.size());
  Abc::FloatArraySample minSample;
  if(min.size() > 0)
    minSample = Abc::FloatArraySample((const Abc::float32_t *)&min[0], min.size());
  Abc::FloatArraySample maxSample;
  if(max.size() > 0)
    maxSample = Abc::FloatArraySample((const Abc::float32_t *)&max[0], max.size());
  Abc::FloatArraySample uSample;
  if(u.size() > 0)
    uSample = Abc::FloatArraySample((const Abc::float32_t *)&u[0], u.size());
  Abc::FloatArraySample vSample;
  if(v.size() > 0)
    vSample = Abc::FloatArraySample((const Abc::float32_t *)&v[0], v.size());
  Abc::FloatArraySample wSample;
  if(w.size() > 0)
    wSample = Abc::FloatArraySample((const Abc::float32_t *)&w[0], w.size());

  abcThis_->setTrimCurve(nLoops, nCurvesSample, nSample, orderSample, knotSample, minSample, maxSample, uSample, vSample, wSample);
    
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_setTrimCurve")
}

// Defined at ONuPatchSample.kl:37:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicONuPatchSample_getTrimNumLoops(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimNumLoops")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimNumLoops. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getTrimNumLoops();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicONuPatchSample_getTrimNumLoops", 0)
}

// Defined at ONuPatchSample.kl:38:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimNumCurves(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimNumCurves")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimNumCurves. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getTrimNumCurves)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimNumCurves")
}

// Defined at ONuPatchSample.kl:39:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimNumVertices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimNumVertices")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimNumVertices. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getTrimNumVertices)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimNumVertices")
}

// Defined at ONuPatchSample.kl:40:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimOrder(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimOrder")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimOrder. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getTrimOrder)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimOrder")
}

// Defined at ONuPatchSample.kl:41:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimKnot(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimKnot")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimKnot. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getTrimKnot)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimKnot")
}

// Defined at ONuPatchSample.kl:42:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimMin(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimMin")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimMin. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getTrimMin)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimMin")
}

// Defined at ONuPatchSample.kl:43:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimMax(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimMax")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimMax. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getTrimMax)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimMax")
}

// Defined at ONuPatchSample.kl:44:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimU(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimU")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimU. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getTrimU)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimU")
}

// Defined at ONuPatchSample.kl:45:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimV(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimV")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimV. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getTrimV)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimV")
}

// Defined at ONuPatchSample.kl:46:1
FABRIC_EXT_EXPORT void AlembicONuPatchSample_getTrimW(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_getTrimW")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_getTrimW. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getTrimW)
  ALEMBIC_CATCH_STATEMENT("AlembicONuPatchSample_getTrimW")
}

// Defined at ONuPatchSample.kl:47:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicONuPatchSample_hasTrimCurve(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicONuPatchSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicONuPatchSample_hasTrimCurve")

  AbcG::ONuPatchSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicONuPatchSample, AbcG::ONuPatchSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicONuPatchSample_hasTrimCurve. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->hasTrimCurve();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicONuPatchSample_hasTrimCurve", false)
}
