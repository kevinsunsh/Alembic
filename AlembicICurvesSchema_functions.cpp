////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicICurvesSchema_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at ICurvesSchema.kl:9:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_construct")
}

// Defined at ICurvesSchema.kl:10:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_free")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::ICurvesSchema)
  
  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_free")
}

// Defined at ICurvesSchema.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICurvesSchema_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_valid")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICurvesSchema_valid", false)
}

// Defined at ICurvesSchema.kl:14:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicICurvesSchema_getTopologyVariance(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getTopologyVariance")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getTopologyVariance. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getTopologyVariance();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICurvesSchema_getTopologyVariance", 0)
}

// Defined at ICurvesSchema.kl:15:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICurvesSchema_isConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_isConstant")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_isConstant. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isConstant();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICurvesSchema_isConstant", false)
}

// Defined at ICurvesSchema.kl:16:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_get(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSample >::IOParam sample,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam ss
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_get")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_get. unable to convert: this_");
    return;
  }
  AbcG::ICurvesSchema::Sample * abcSample = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSample, AbcG::ICurvesSchema::Sample>(sample, abcSample)){
    setError("Error in AlembicICurvesSchema_get. unable to convert: sample");
    return;
  }
  Abc::ISampleSelector* abcSs = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(ss, abcSs)){
    setError("Error in AlembicICurvesSchema_get. unable to convert: ss");
    return;
  }
  abcThis_->get(*abcSample, *abcSs);
  conv_to_AbcBasePtr<KL::AlembicICurvesSample, AbcG::ICurvesSchema::Sample>(abcSample, sample);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_get")
}

// Defined at ICurvesSchema.kl:18:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getTimeSampling")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getTimeSampling")
}

// Defined at ICurvesSchema.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicICurvesSchema_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getNumSamples")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICurvesSchema_getNumSamples", 0)
}

// Defined at ICurvesSchema.kl:20:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getArbGeomParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getArbGeomParams")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getArbGeomParams. unable to convert: this_");
    return;
  }
  if(!abcThis_->getArbGeomParams().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getArbGeomParams());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getArbGeomParams")
}

// Defined at ICurvesSchema.kl:21:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getUserProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getUserProperties")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getUserProperties. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUserProperties().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getUserProperties());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getUserProperties")
}

// Defined at ICurvesSchema.kl:22:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getChildBoundsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getChildBoundsProperty")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getChildBoundsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getChildBoundsProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getChildBoundsProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getChildBoundsProperty")
}

// Defined at ICurvesSchema.kl:23:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getUVsParam(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIVec2VfGeomParam >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getUVsParam")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getUVsParam. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUVsParam().valid())
    return;
  AbcG::ITypedGeomParam<Abc::V2fTPTraits> * abc_result = new AbcG::ITypedGeomParam<Abc::V2fTPTraits> (abcThis_->getUVsParam());
  conv_to_AbcBasePtr<KL::AlembicIVec2VfGeomParam, AbcG::ITypedGeomParam<Abc::V2fTPTraits> >(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getUVsParam")
}

// Defined at ICurvesSchema.kl:24:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getNormalsParam(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIVec3NfGeomParam >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getNormalsParam")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getNormalsParam. unable to convert: this_");
    return;
  }
  if(!abcThis_->getNormalsParam().valid())
    return;
  AbcG::ITypedGeomParam<Abc::N3fTPTraits> * abc_result = new AbcG::ITypedGeomParam<Abc::N3fTPTraits> (abcThis_->getNormalsParam());
  conv_to_AbcBasePtr<KL::AlembicIVec3NfGeomParam, AbcG::ITypedGeomParam<Abc::N3fTPTraits> >(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getNormalsParam")
}

// Defined at ICurvesSchema.kl:25:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getWidthsParam(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIFloat32GeomParam >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getWidthsParam")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getWidthsParam. unable to convert: this_");
    return;
  }
  if(!abcThis_->getWidthsParam().valid())
    return;
  AbcG::ITypedGeomParam<Abc::Float32TPTraits> * abc_result = new AbcG::ITypedGeomParam<Abc::Float32TPTraits> (abcThis_->getWidthsParam());
  conv_to_AbcBasePtr<KL::AlembicIFloat32GeomParam, AbcG::ITypedGeomParam<Abc::Float32TPTraits> >(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getWidthsParam")
}

// Defined at ICurvesSchema.kl:26:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getPositionsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getPositionsProperty")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getPositionsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getPositionsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getPositionsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getPositionsProperty")
}

// Defined at ICurvesSchema.kl:27:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getVelocitiesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getVelocitiesProperty")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getVelocitiesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getVelocitiesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getVelocitiesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getVelocitiesProperty")
}

// Defined at ICurvesSchema.kl:28:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getNumVerticesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getNumVerticesProperty")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getNumVerticesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getNumVerticesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getNumVerticesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getNumVerticesProperty")
}

// Defined at ICurvesSchema.kl:29:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getOrdersProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getOrdersProperty")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getOrdersProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getOrdersProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getOrdersProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getOrdersProperty")
}

// Defined at ICurvesSchema.kl:30:1
FABRIC_EXT_EXPORT void AlembicICurvesSchema_getKnotsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICurvesSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICurvesSchema_getKnotsProperty")

  AbcG::ICurvesSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICurvesSchema, AbcG::ICurvesSchema>(this_, abcThis_)){
    setError("Error in AlembicICurvesSchema_getKnotsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getKnotsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getKnotsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICurvesSchema_getKnotsProperty")
}
