////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicIPointsSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at IPointsSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicIPointsSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_construct")

  construct_AbcBasePtr(AbcG::IPointsSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicIPointsSample_construct")
}

// Defined at IPointsSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicIPointsSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_free")

  AbcG::IPointsSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPointsSample, AbcG::IPointsSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::IPointsSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicIPointsSample_free")
}

// Defined at IPointsSample.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIPointsSample_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_valid")

  AbcG::IPointsSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPointsSample, AbcG::IPointsSchema::Sample>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIPointsSample_valid", false)
}

// Defined at IPointsSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicIPointsSample_getPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_getPositions")

  AbcG::IPointsSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPointsSample, AbcG::IPointsSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPointsSample_getPositions. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::P3fArraySamplePtr, KL::Vec3, getPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicIPointsSample_getPositions")
}

// Defined at IPointsSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicIPointsSample_getIds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_getIds")

  AbcG::IPointsSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPointsSample, AbcG::IPointsSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPointsSample_getIds. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::UInt64ArraySamplePtr, KL::UInt64, getIds)
  ALEMBIC_CATCH_STATEMENT("AlembicIPointsSample_getIds")
}

// Defined at IPointsSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicIPointsSample_getVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_getVelocities")

  AbcG::IPointsSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPointsSample, AbcG::IPointsSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPointsSample_getVelocities. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::V3fArraySamplePtr, KL::Vec3, getVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicIPointsSample_getVelocities")
}

// Defined at IPointsSample.kl:17:1
FABRIC_EXT_EXPORT void AlembicIPointsSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPointsSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPointsSample_getSelfBounds")

  AbcG::IPointsSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPointsSample, AbcG::IPointsSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPointsSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicIPointsSample_getSelfBounds")
}
