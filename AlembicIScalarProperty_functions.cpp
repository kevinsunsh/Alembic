////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicIScalarProperty_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at IScalarProperty.kl:9:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_construct")
}

// Defined at IScalarProperty.kl:10:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_free")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(Abc::IScalarProperty)
  
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_free")
}

// Defined at IScalarProperty.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIScalarProperty_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_valid")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_valid", false)
}

// Defined at IScalarProperty.kl:14:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getHeader(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicPropertyHeader >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getHeader")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getHeader. unable to convert: this_");
    return;
  }
  AlembicPropertyGetHeader()
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getHeader")
}

// Defined at IScalarProperty.kl:15:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getName")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getName. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->getName();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getName")
}

// Defined at IScalarProperty.kl:16:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicIScalarProperty_getPropertyType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getPropertyType")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getPropertyType. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getPropertyType();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_getPropertyType", 0)
}

// Defined at IScalarProperty.kl:17:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIScalarProperty_isScalar(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_isScalar")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_isScalar. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isScalar();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_isScalar", false)
}

// Defined at IScalarProperty.kl:18:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIScalarProperty_isArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_isArray")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_isArray. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isArray();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_isArray", false)
}

// Defined at IScalarProperty.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIScalarProperty_isCompound(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_isCompound")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_isCompound. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isCompound();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_isCompound", false)
}

// Defined at IScalarProperty.kl:20:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIScalarProperty_isSimple(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_isSimple")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_isSimple. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isSimple();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_isSimple", false)
}

// Defined at IScalarProperty.kl:21:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getMetaData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getMetaData")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getMetaData. unable to convert: this_");
    return;
  }
  AlembicGetMetaData()
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getMetaData")
}

// Defined at IScalarProperty.kl:22:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getDataType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicDataType >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getDataType")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getDataType. unable to convert: this_");
    return;
  }
  Abc::DataType abc_result = abcThis_->getDataType();
  conv_to_AbcBase<KL::AlembicDataType, Abc::DataType>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getDataType")
}

// Defined at IScalarProperty.kl:23:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getTimeSampling")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getTimeSampling")
}

// Defined at IScalarProperty.kl:24:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getObject(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIObject >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getObject")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getObject. unable to convert: this_");
    return;
  }
  Abc::IObject* abc_result = new Abc::IObject(abcThis_->getObject());
  conv_to_AbcBasePtr<KL::AlembicIObject, Abc::IObject>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getObject")
}

// Defined at IScalarProperty.kl:26:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_construct2Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam parent,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_construct2Args")

  Abc::ICompoundProperty* abcParent = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(parent, abcParent)){
    setError("Error in AlembicIScalarProperty_construct2Args. unable to convert: parent");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicIScalarProperty_construct2Args. unable to convert: name");
    return;
  }

  Abc::IScalarProperty * abcThis_ = new Abc::IScalarProperty(*abcParent, abcName);
  this_->handle = new PtrHandle<Abc::IScalarProperty>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_construct2Args")
}

// Defined at IScalarProperty.kl:28:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicIScalarProperty_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getNumSamples")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_getNumSamples", 0)
}

// Defined at IScalarProperty.kl:29:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIScalarProperty_isConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_isConstant")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_isConstant. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isConstant();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIScalarProperty_isConstant", false)
}

// Defined at IScalarProperty.kl:30:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getParent(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getParent")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getParent. unable to convert: this_");
    return;
  }
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getParent());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getParent")
}

// Defined at IScalarProperty.kl:32:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsBoolean(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Boolean > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsBoolean")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsBoolean. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(Boolean, kBooleanPOD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsBoolean")
}

// Defined at IScalarProperty.kl:33:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsBooleanWithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Boolean > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsBooleanWithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsBooleanWithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsBooleanWithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(Boolean, kBooleanPOD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsBooleanWithISS")
}

// Defined at IScalarProperty.kl:34:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt8(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt8 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt8")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt8. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(UInt8, kUint8POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt8")
}

// Defined at IScalarProperty.kl:35:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt8WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt8 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt8WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt8WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsUInt8WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(UInt8, kUint8POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt8WithISS")
}

// Defined at IScalarProperty.kl:36:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt8(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt8 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt8")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt8. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(SInt8, kInt8POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt8")
}

// Defined at IScalarProperty.kl:37:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt8WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt8 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt8WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt8WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsSInt8WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(SInt8, kInt8POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt8WithISS")
}

// Defined at IScalarProperty.kl:38:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt16(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt16 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt16")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt16. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(UInt16, kUint16POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt16")
}

// Defined at IScalarProperty.kl:39:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt16WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt16 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt16WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt16WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsUInt16WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(UInt16, kUint16POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt16WithISS")
}

// Defined at IScalarProperty.kl:40:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt16(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt16 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt16")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt16. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(SInt16, kInt16POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt16")
}

// Defined at IScalarProperty.kl:41:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt16WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt16 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt16WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt16WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsSInt16WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(SInt16, kInt16POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt16WithISS")
}

// Defined at IScalarProperty.kl:42:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt32(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt32")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt32. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(UInt32, kUint32POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt32")
}

// Defined at IScalarProperty.kl:43:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt32WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt32WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt32WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsUInt32WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(UInt32, kUint32POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt32WithISS")
}

// Defined at IScalarProperty.kl:44:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt32(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt32")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt32. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(SInt32, kInt32POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt32")
}

// Defined at IScalarProperty.kl:45:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt32WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt32WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt32WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsSInt32WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(SInt32, kInt32POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt32WithISS")
}

// Defined at IScalarProperty.kl:46:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt64(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt64")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt64. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(UInt64, kUint64POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt64")
}

// Defined at IScalarProperty.kl:47:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsUInt64WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::UInt64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsUInt64WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsUInt64WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsUInt64WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(UInt64, kUint64POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsUInt64WithISS")
}

// Defined at IScalarProperty.kl:48:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt64(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt64")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt64. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(SInt64, kInt64POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt64")
}

// Defined at IScalarProperty.kl:49:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsSInt64WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::SInt64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsSInt64WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsSInt64WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsSInt64WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(SInt64, kInt64POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsSInt64WithISS")
}

// Defined at IScalarProperty.kl:50:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsFloat16(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsFloat16")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsFloat16. unable to convert: this_");
    return;
  }

  const Abc::PropertyHeader & header = abcThis_->getHeader();
  if(header.getDataType().getExtent() == 0)
    return;
  if(header.getDataType().getPod() != Abc::kFloat16POD)
    FABRIC_EXT_SETERROR_AND_RETURN("AlembicIScalarProperty_getAsFloat16: DataType.pod() not kFloat16POD.");

  std::vector<Abc::float16_t> floats(header.getDataType().getExtent());
  _result.resize(floats.size());
  abcThis_->get(&floats[0]);
  for(size_t i=0;i<floats.size();i++)
    _result[i] = floats[i];
    
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsFloat16")
}

// Defined at IScalarProperty.kl:51:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsFloat16WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsFloat16WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsFloat16WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsFloat16WithISS. unable to convert: iSS");
    return;
  }

  const Abc::PropertyHeader & header = abcThis_->getHeader();
  if(header.getDataType().getExtent() == 0)
    return;
  if(header.getDataType().getPod() != Abc::kFloat16POD)
    FABRIC_EXT_SETERROR_AND_RETURN("AlembicIScalarProperty_getAsFloat16: DataType.pod() not kFloat16POD.");

  std::vector<Abc::float16_t> floats(header.getDataType().getExtent());
  _result.resize(floats.size());
  abcThis_->get(&floats[0], *abcISS);
  for(size_t i=0;i<floats.size();i++)
    _result[i] = floats[i];
    
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsFloat16WithISS")
}

// Defined at IScalarProperty.kl:52:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsFloat32(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsFloat32")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsFloat32. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(Float32, kFloat32POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsFloat32")
}

// Defined at IScalarProperty.kl:53:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsFloat32WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsFloat32WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsFloat32WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsFloat32WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(Float32, kFloat32POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsFloat32WithISS")
}

// Defined at IScalarProperty.kl:54:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsFloat64(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsFloat64")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsFloat64. unable to convert: this_");
    return;
  }
  AlembicIScalarPropertyGetExport(Float64, kFloat64POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsFloat64")
}

// Defined at IScalarProperty.kl:55:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsFloat64WithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::Float64 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsFloat64WithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsFloat64WithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsFloat64WithISS. unable to convert: iSS");
    return;
  }
  AlembicIScalarPropertyGetExportWithISS(Float64, kFloat64POD)
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsFloat64WithISS")
}

// Defined at IScalarProperty.kl:56:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsString")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsString. unable to convert: this_");
    return;
  }

  const Abc::PropertyHeader & header = abcThis_->getHeader();
  if(header.getDataType().getExtent() == 0)
    return;
  if(header.getDataType().getPod() == Abc::kStringPOD)
  {
    std::vector<std::string> strings(header.getDataType().getExtent());
    _result.resize(strings.size());
    abcThis_->get(&strings[0]);
    for(size_t i=0;i<strings.size();i++)
      _result[i] = strings[i].c_str();
  }
  else if(header.getDataType().getPod() == Abc::kWstringPOD)
  {
    std::vector<std::wstring> wstrings(header.getDataType().getExtent());
    _result.resize(wstrings.size());
    abcThis_->get(&wstrings[0]);
    for(size_t i=0;i<wstrings.size();i++)
    {
      std::string s;
      for(size_t j=0;j<wstrings[i].length();j++)
        s += wstrings[i][j];
      _result[i] = s.c_str();
    }
  }
  else
    FABRIC_EXT_SETERROR_AND_RETURN("AlembicIScalarProperty_getAsString: DataType.pod() not kStringPOD / kWstringPOD.");
    
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsString")
}

// Defined at IScalarProperty.kl:57:1
FABRIC_EXT_EXPORT void AlembicIScalarProperty_getAsStringWithISS(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam iSS
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIScalarProperty_getAsStringWithISS")

  Abc::IScalarProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(this_, abcThis_)){
    setError("Error in AlembicIScalarProperty_getAsStringWithISS. unable to convert: this_");
    return;
  }
  Abc::ISampleSelector* abcISS = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(iSS, abcISS)){
    setError("Error in AlembicIScalarProperty_getAsStringWithISS. unable to convert: iSS");
    return;
  }

  const Abc::PropertyHeader & header = abcThis_->getHeader();
  if(header.getDataType().getExtent() == 0)
    return;
  if(header.getDataType().getPod() == Abc::kStringPOD)
  {
    std::vector<std::string> strings(header.getDataType().getExtent());
    _result.resize(strings.size());
    abcThis_->get(&strings[0], *abcISS);
    for(size_t i=0;i<strings.size();i++)
      _result[i] = strings[i].c_str();
  }
  else if(header.getDataType().getPod() == Abc::kWstringPOD)
  {
    std::vector<std::wstring> wstrings(header.getDataType().getExtent());
    _result.resize(wstrings.size());
    abcThis_->get(&wstrings[0], *abcISS);
    for(size_t i=0;i<wstrings.size();i++)
    {
      std::string s;
      for(size_t j=0;j<wstrings[i].length();j++)
        s += wstrings[i][j];
      _result[i] = s.c_str();
    }
  }
  else
    FABRIC_EXT_SETERROR_AND_RETURN("AlembicIScalarProperty_getAsString: DataType.pod() not kStringPOD / kWstringPOD.");
    
  ALEMBIC_CATCH_STATEMENT("AlembicIScalarProperty_getAsStringWithISS")
}
