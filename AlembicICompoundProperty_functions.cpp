////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicICompoundProperty_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at ICompoundProperty.kl:9:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_construct")
}

// Defined at ICompoundProperty.kl:10:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_free")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::ICompoundProperty)
  
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_free")
}

// Defined at ICompoundProperty.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICompoundProperty_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_valid")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_valid", false)
}

// Defined at ICompoundProperty.kl:14:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_construct2Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam parent,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_construct2Args")

  Abc::ICompoundProperty* abcParent = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(parent, abcParent)){
    setError("Error in AlembicICompoundProperty_construct2Args. unable to convert: parent");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicICompoundProperty_construct2Args. unable to convert: name");
    return;
  }

  Abc::ICompoundProperty * abcThis_ = new Abc::ICompoundProperty(*abcParent, abcName);
  this_->handle = new PtrHandle<Abc::ICompoundProperty>(abcThis_, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_construct2Args")
}

// Defined at ICompoundProperty.kl:16:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getHeader(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicPropertyHeader >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getHeader")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getHeader. unable to convert: this_");
    return;
  }
  AlembicPropertyGetHeader()
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getHeader")
}

// Defined at ICompoundProperty.kl:17:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getName")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getName. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->getName();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getName")
}

// Defined at ICompoundProperty.kl:18:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicICompoundProperty_getPropertyType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getPropertyType")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getPropertyType. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getPropertyType();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_getPropertyType", 0)
}

// Defined at ICompoundProperty.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICompoundProperty_isScalar(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_isScalar")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_isScalar. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isScalar();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_isScalar", false)
}

// Defined at ICompoundProperty.kl:20:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICompoundProperty_isArray(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_isArray")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_isArray. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isArray();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_isArray", false)
}

// Defined at ICompoundProperty.kl:21:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICompoundProperty_isCompound(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_isCompound")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_isCompound. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isCompound();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_isCompound", false)
}

// Defined at ICompoundProperty.kl:22:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicICompoundProperty_isSimple(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_isSimple")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_isSimple. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isSimple();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_isSimple", false)
}

// Defined at ICompoundProperty.kl:23:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getMetaData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getMetaData")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getMetaData. unable to convert: this_");
    return;
  }
  AlembicGetMetaData()
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getMetaData")
}

// Defined at ICompoundProperty.kl:24:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getDataType(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicDataType >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getDataType")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getDataType. unable to convert: this_");
    return;
  }
  Abc::DataType abc_result = abcThis_->getDataType();
  conv_to_AbcBase<KL::AlembicDataType, Abc::DataType>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getDataType")
}

// Defined at ICompoundProperty.kl:25:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getTimeSampling")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getTimeSampling")
}

// Defined at ICompoundProperty.kl:26:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getObject(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIObject >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getObject")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getObject. unable to convert: this_");
    return;
  }
  Abc::IObject* abc_result = new Abc::IObject(abcThis_->getObject());
  conv_to_AbcBasePtr<KL::AlembicIObject, Abc::IObject>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getObject")
}

// Defined at ICompoundProperty.kl:28:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicICompoundProperty_getNumProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getNumProperties")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getNumProperties. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumProperties();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicICompoundProperty_getNumProperties", 0)
}

// Defined at ICompoundProperty.kl:29:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getPropertyHeader(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicPropertyHeader >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam propertyIndex
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getPropertyHeader")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getPropertyHeader. unable to convert: this_");
    return;
  }
  unsigned int abcPropertyIndex = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(propertyIndex, abcPropertyIndex)){
    setError("Error in AlembicICompoundProperty_getPropertyHeader. unable to convert: propertyIndex");
    return;
  }

  const Abc::PropertyHeader & abc_result = abcThis_->getPropertyHeader(abcPropertyIndex);
  conv_to_AbcBasePtr<KL::AlembicPropertyHeader, Abc::PropertyHeader>((Abc::PropertyHeader*)&abc_result, _result);
    
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getPropertyHeader")
}

// Defined at ICompoundProperty.kl:30:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getPropertyHeaderByName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicPropertyHeader >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam propertyName
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getPropertyHeaderByName")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getPropertyHeaderByName. unable to convert: this_");
    return;
  }
  std::string abcPropertyName = "";
  if(!conv_from_String(propertyName, abcPropertyName)){
    setError("Error in AlembicICompoundProperty_getPropertyHeaderByName. unable to convert: propertyName");
    return;
  }

  const Abc::PropertyHeader * abc_result = abcThis_->getPropertyHeader(abcPropertyName);
  conv_to_AbcBasePtr<KL::AlembicPropertyHeader, Abc::PropertyHeader>((Abc::PropertyHeader *)abc_result, _result);
    
  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getPropertyHeaderByName")
}

// Defined at ICompoundProperty.kl:31:1
FABRIC_EXT_EXPORT void AlembicICompoundProperty_getParent(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicICompoundProperty_getParent")

  Abc::ICompoundProperty* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(this_, abcThis_)){
    setError("Error in AlembicICompoundProperty_getParent. unable to convert: this_");
    return;
  }
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getParent());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicICompoundProperty_getParent")
}
