////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicIXformSchema_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at IXformSchema.kl:9:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_construct")
}

// Defined at IXformSchema.kl:10:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_free")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::IXformSchema)
  
  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_free")
}

// Defined at IXformSchema.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIXformSchema_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_valid")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIXformSchema_valid", false)
}

// Defined at IXformSchema.kl:14:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIXformSchema_isConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_isConstant")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_isConstant. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isConstant();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIXformSchema_isConstant", false)
}

// Defined at IXformSchema.kl:15:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIXformSchema_isConstantIdentity(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_isConstantIdentity")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_isConstantIdentity. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isConstantIdentity();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIXformSchema_isConstantIdentity", false)
}

// Defined at IXformSchema.kl:16:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_get(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicXformSample >::IOParam sample,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam ss
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_get")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_get. unable to convert: this_");
    return;
  }
  AbcG::XformSample * abcSample = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicXformSample, AbcG::XformSample>(sample, abcSample)){
    setError("Error in AlembicIXformSchema_get. unable to convert: sample");
    return;
  }
  Abc::ISampleSelector* abcSs = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(ss, abcSs)){
    setError("Error in AlembicIXformSchema_get. unable to convert: ss");
    return;
  }
  abcThis_->get(*abcSample, *abcSs);
  conv_to_AbcBasePtr<KL::AlembicXformSample, AbcG::XformSample>(abcSample, sample);

  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_get")
}

// Defined at IXformSchema.kl:18:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_getTimeSampling")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_getTimeSampling")
}

// Defined at IXformSchema.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicIXformSchema_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_getNumSamples")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIXformSchema_getNumSamples", 0)
}

// Defined at IXformSchema.kl:20:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_getArbGeomParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_getArbGeomParams")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_getArbGeomParams. unable to convert: this_");
    return;
  }
  if(!abcThis_->getArbGeomParams().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getArbGeomParams());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_getArbGeomParams")
}

// Defined at IXformSchema.kl:21:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_getUserProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_getUserProperties")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_getUserProperties. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUserProperties().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getUserProperties());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_getUserProperties")
}

// Defined at IXformSchema.kl:22:1
FABRIC_EXT_EXPORT void AlembicIXformSchema_getChildBoundsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIXformSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIXformSchema_getChildBoundsProperty")

  AbcG::IXformSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIXformSchema, AbcG::IXformSchema>(this_, abcThis_)){
    setError("Error in AlembicIXformSchema_getChildBoundsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getChildBoundsProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getChildBoundsProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicIXformSchema_getChildBoundsProperty")
}
