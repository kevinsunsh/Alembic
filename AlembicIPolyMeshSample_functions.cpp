////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicIPolyMeshSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at IPolyMeshSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_construct")

  construct_AbcBasePtr(AbcG::IPolyMeshSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_construct")
}

// Defined at IPolyMeshSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_free")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::IPolyMeshSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_free")
}

// Defined at IPolyMeshSample.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicIPolyMeshSample_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_valid")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicIPolyMeshSample_valid", false)
}

// Defined at IPolyMeshSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_getPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_getPositions")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPolyMeshSample_getPositions. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::P3fArraySamplePtr, KL::Vec3, getPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_getPositions")
}

// Defined at IPolyMeshSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_getVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_getVelocities")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPolyMeshSample_getVelocities. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::V3fArraySamplePtr, KL::Vec3, getVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_getVelocities")
}

// Defined at IPolyMeshSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_getSelfBounds")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPolyMeshSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_getSelfBounds")
}

// Defined at IPolyMeshSample.kl:17:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_getFaceIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_getFaceIndices")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPolyMeshSample_getFaceIndices. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::Int32ArraySamplePtr, KL::SInt32, getFaceIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_getFaceIndices")
}

// Defined at IPolyMeshSample.kl:18:1
FABRIC_EXT_EXPORT void AlembicIPolyMeshSample_getFaceCounts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicIPolyMeshSample_getFaceCounts")

  AbcG::IPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicIPolyMeshSample, AbcG::IPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicIPolyMeshSample_getFaceCounts. unable to convert: this_");
    return;
  }
  AlembicIExtractExternalArrayFromSample(Abc::Int32ArraySamplePtr, KL::SInt32, getFaceCounts)
  ALEMBIC_CATCH_STATEMENT("AlembicIPolyMeshSample_getFaceCounts")
}
