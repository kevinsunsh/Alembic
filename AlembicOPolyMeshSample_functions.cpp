////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicOPolyMeshSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at OPolyMeshSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_construct")

  construct_AbcBasePtr(AbcG::OPolyMeshSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_construct")
}

// Defined at OPolyMeshSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_free")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::OPolyMeshSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_free")
}

// Defined at OPolyMeshSample.kl:12:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getPositions")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getPositions. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::P3fArraySample, KL::Vec3, getPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getPositions")
}

// Defined at OPolyMeshSample.kl:13:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setPositions")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setPositions. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::P3fArraySample, Abc::V3f, setPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setPositions")
}

// Defined at OPolyMeshSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getVelocities")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getVelocities. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::V3fArraySample, KL::Vec3, getVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getVelocities")
}

// Defined at OPolyMeshSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setVelocities")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setVelocities. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::V3fArraySample, Abc::V3f, setVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setVelocities")
}

// Defined at OPolyMeshSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getSelfBounds")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getSelfBounds")
}

// Defined at OPolyMeshSample.kl:17:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::INParam bounds
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setSelfBounds")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abcBounds;
  if(!conv_from_Box3(bounds, abcBounds)){
    setError("Error in AlembicOPolyMeshSample_setSelfBounds. unable to convert: bounds");
    return;
  }
  abcThis_->setSelfBounds(abcBounds);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setSelfBounds")
}

// Defined at OPolyMeshSample.kl:18:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getFaceIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getFaceIndices")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getFaceIndices. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getFaceIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getFaceIndices")
}

// Defined at OPolyMeshSample.kl:19:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setFaceIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setFaceIndices")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setFaceIndices. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, Abc::int32_t, setFaceIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setFaceIndices")
}

// Defined at OPolyMeshSample.kl:20:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getFaceCounts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getFaceCounts")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getFaceCounts. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getFaceCounts)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getFaceCounts")
}

// Defined at OPolyMeshSample.kl:21:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setFaceCounts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setFaceCounts")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setFaceCounts. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, Abc::int32_t, setFaceCounts)
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setFaceCounts")
}

// Defined at OPolyMeshSample.kl:22:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getUVs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec2VfGeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getUVs")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getUVs. unable to convert: this_");
    return;
  }

  AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample * abc_result = new AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample(abcThis_->getUVs());
  conv_to_AbcBasePtr<KL::AlembicOVec2VfGeomParamSample, AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getUVs")
}

// Defined at OPolyMeshSample.kl:23:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setUVs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec2VfGeomParamSample >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setUVs")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setUVs. unable to convert: this_");
    return;
  }
  AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample * abcValues = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOVec2VfGeomParamSample, AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample>(values, abcValues)){
    setError("Error in AlembicOPolyMeshSample_setUVs. unable to convert: values");
    return;
  }
  abcThis_->setUVs(*abcValues);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setUVs")
}

// Defined at OPolyMeshSample.kl:24:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_getNormals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec3NfGeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_getNormals")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_getNormals. unable to convert: this_");
    return;
  }

  AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample * abc_result = new AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample(abcThis_->getNormals());
  conv_to_AbcBasePtr<KL::AlembicOVec3NfGeomParamSample, AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_getNormals")
}

// Defined at OPolyMeshSample.kl:25:1
FABRIC_EXT_EXPORT void AlembicOPolyMeshSample_setNormals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOPolyMeshSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec3NfGeomParamSample >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOPolyMeshSample_setNormals")

  AbcG::OPolyMeshSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOPolyMeshSample, AbcG::OPolyMeshSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOPolyMeshSample_setNormals. unable to convert: this_");
    return;
  }
  AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample * abcValues = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOVec3NfGeomParamSample, AbcG::OTypedGeomParam<Abc::N3fTPTraits>::Sample>(values, abcValues)){
    setError("Error in AlembicOPolyMeshSample_setNormals. unable to convert: values");
    return;
  }
  abcThis_->setNormals(*abcValues);

  ALEMBIC_CATCH_STATEMENT("AlembicOPolyMeshSample_setNormals")
}
