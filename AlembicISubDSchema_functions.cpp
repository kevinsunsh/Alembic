////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicISubDSchema_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at ISubDSchema.kl:9:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_construct")
}

// Defined at ISubDSchema.kl:10:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_free")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::ISubDSchema)
  
  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_free")
}

// Defined at ISubDSchema.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicISubDSchema_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_valid")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicISubDSchema_valid", false)
}

// Defined at ISubDSchema.kl:14:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicISubDSchema_getTopologyVariance(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getTopologyVariance")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getTopologyVariance. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getTopologyVariance();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicISubDSchema_getTopologyVariance", 0)
}

// Defined at ISubDSchema.kl:15:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicISubDSchema_isConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_isConstant")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_isConstant. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isConstant();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicISubDSchema_isConstant", false)
}

// Defined at ISubDSchema.kl:16:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_get(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSample >::IOParam sample,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam ss
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_get")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_get. unable to convert: this_");
    return;
  }
  AbcG::ISubDSchema::Sample * abcSample = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSample, AbcG::ISubDSchema::Sample>(sample, abcSample)){
    setError("Error in AlembicISubDSchema_get. unable to convert: sample");
    return;
  }
  Abc::ISampleSelector* abcSs = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(ss, abcSs)){
    setError("Error in AlembicISubDSchema_get. unable to convert: ss");
    return;
  }
  abcThis_->get(*abcSample, *abcSs);
  conv_to_AbcBasePtr<KL::AlembicISubDSample, AbcG::ISubDSchema::Sample>(abcSample, sample);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_get")
}

// Defined at ISubDSchema.kl:18:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getTimeSampling")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getTimeSampling")
}

// Defined at ISubDSchema.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicISubDSchema_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getNumSamples")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicISubDSchema_getNumSamples", 0)
}

// Defined at ISubDSchema.kl:20:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getArbGeomParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getArbGeomParams")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getArbGeomParams. unable to convert: this_");
    return;
  }

  if(!abcThis_->getArbGeomParams().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getArbGeomParams());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getArbGeomParams")
}

// Defined at ISubDSchema.kl:21:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getUserProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getUserProperties")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getUserProperties. unable to convert: this_");
    return;
  }

  if(!abcThis_->getUserProperties().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getUserProperties());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getUserProperties")
}

// Defined at ISubDSchema.kl:22:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getChildBoundsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getChildBoundsProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getChildBoundsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getChildBoundsProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getChildBoundsProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getChildBoundsProperty")
}

// Defined at ISubDSchema.kl:23:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getUVsParam(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIVec2VfGeomParam >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getUVsParam")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getUVsParam. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUVsParam().valid())
    return;
  AbcG::ITypedGeomParam<Abc::V2fTPTraits> * abc_result = new AbcG::ITypedGeomParam<Abc::V2fTPTraits> (abcThis_->getUVsParam());
  conv_to_AbcBasePtr<KL::AlembicIVec2VfGeomParam, AbcG::ITypedGeomParam<Abc::V2fTPTraits> >(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getUVsParam")
}

// Defined at ISubDSchema.kl:24:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getFaceCountsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getFaceCountsProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getFaceCountsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getFaceCountsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getFaceCountsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getFaceCountsProperty")
}

// Defined at ISubDSchema.kl:25:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getFaceIndicesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getFaceIndicesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getFaceIndicesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getFaceIndicesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getFaceIndicesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getFaceIndicesProperty")
}

// Defined at ISubDSchema.kl:26:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getPositionsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getPositionsProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getPositionsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getPositionsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getPositionsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getPositionsProperty")
}

// Defined at ISubDSchema.kl:27:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getVelocitiesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getVelocitiesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getVelocitiesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getVelocitiesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getVelocitiesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getVelocitiesProperty")
}

// Defined at ISubDSchema.kl:28:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getFaceVaryingInterpolateBoundaryProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getFaceVaryingInterpolateBoundaryProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getFaceVaryingInterpolateBoundaryProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getFaceVaryingInterpolateBoundaryProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getFaceVaryingInterpolateBoundaryProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getFaceVaryingInterpolateBoundaryProperty")
}

// Defined at ISubDSchema.kl:29:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getFaceVaryingPropagateCornersProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getFaceVaryingPropagateCornersProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getFaceVaryingPropagateCornersProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getFaceVaryingPropagateCornersProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getFaceVaryingPropagateCornersProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getFaceVaryingPropagateCornersProperty")
}

// Defined at ISubDSchema.kl:30:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getInterpolateBoundaryProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getInterpolateBoundaryProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getInterpolateBoundaryProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getInterpolateBoundaryProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getInterpolateBoundaryProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getInterpolateBoundaryProperty")
}

// Defined at ISubDSchema.kl:31:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getCreaseIndicesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getCreaseIndicesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getCreaseIndicesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getCreaseIndicesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getCreaseIndicesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getCreaseIndicesProperty")
}

// Defined at ISubDSchema.kl:32:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getCreaseLengthsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getCreaseLengthsProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getCreaseLengthsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getCreaseLengthsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getCreaseLengthsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getCreaseLengthsProperty")
}

// Defined at ISubDSchema.kl:33:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getCreaseSharpnessesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getCreaseSharpnessesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getCreaseSharpnessesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getCreaseSharpnessesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getCreaseSharpnessesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getCreaseSharpnessesProperty")
}

// Defined at ISubDSchema.kl:34:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getCornerIndicesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getCornerIndicesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getCornerIndicesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getCornerIndicesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getCornerIndicesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getCornerIndicesProperty")
}

// Defined at ISubDSchema.kl:35:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getCornerSharpnessesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getCornerSharpnessesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getCornerSharpnessesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getCornerSharpnessesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getCornerSharpnessesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getCornerSharpnessesProperty")
}

// Defined at ISubDSchema.kl:36:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getHolesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getHolesProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getHolesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getHolesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getHolesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getHolesProperty")
}

// Defined at ISubDSchema.kl:37:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getSubdivisionSchemeProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getSubdivisionSchemeProperty")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getSubdivisionSchemeProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getSubdivisionSchemeProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getSubdivisionSchemeProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getSubdivisionSchemeProperty")
}

// Defined at ISubDSchema.kl:38:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getFaceSetNames(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getFaceSetNames")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getFaceSetNames. unable to convert: this_");
    return;
  }

  std::vector<std::string> abc_result;
  abcThis_->getFaceSetNames(abc_result);
  _result.resize(abc_result.size());
  for(size_t i=0;i<abc_result.size();i++)
    _result[i] = abc_result[i].c_str();
    
  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getFaceSetNames")
}

// Defined at ISubDSchema.kl:39:1
FABRIC_EXT_EXPORT void AlembicISubDSchema_getFaceSet(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIFaceSet >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_getFaceSet")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_getFaceSet. unable to convert: this_");
    return;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicISubDSchema_getFaceSet. unable to convert: name");
    return;
  }
  AbcG::IFaceSet* abc_result = new AbcG::IFaceSet(abcThis_->getFaceSet(abcName));
  conv_to_AbcBasePtr<KL::AlembicIFaceSet, AbcG::IFaceSet>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicISubDSchema_getFaceSet")
}

// Defined at ISubDSchema.kl:40:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicISubDSchema_hasFaceSet(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISubDSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  ALEMBIC_TRY_STATEMENT("AlembicISubDSchema_hasFaceSet")

  AbcG::ISubDSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISubDSchema, AbcG::ISubDSchema>(this_, abcThis_)){
    setError("Error in AlembicISubDSchema_hasFaceSet. unable to convert: this_");
    return false;
  }
  std::string abcName = "";
  if(!conv_from_String(name, abcName)){
    setError("Error in AlembicISubDSchema_hasFaceSet. unable to convert: name");
    return false;
  }
  bool abc_result = abcThis_->hasFaceSet(abcName);
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicISubDSchema_hasFaceSet", false)
}
