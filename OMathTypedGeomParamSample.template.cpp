////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicO__KLTYPE____PRECISION__GeomParamSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_construct")

  construct_AbcBasePtr(AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample)

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_construct")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_free")

  free_AbcBasePtr(AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample)

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_free")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:18:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesAndScope(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::__KLTYPE__ > >::INParam values,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam scope
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesAndScope")

  unsigned int abcScope = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(scope, abcScope)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesAndScope. unable to convert: scope");
    return;
  }

  Abc::TypedArraySample<__ABCTRAITS__> abcValues;
  size_t packedSize = 0;
  __ABCBASETYPE__ * packed = NULL;
  if(values.size() > 0)
  {
    packedSize = sizeof(__ABCBASETYPE__) * values.size() * __ABCEXTENT__;
    packed = (__ABCBASETYPE__ *)malloc(packedSize);
    size_t offset = 0;
    for(size_t i=0;i<values.size();i++)
    {
      const KL::__KLTYPE__ & value = values[i];
      __KLUNPACK__
      offset += __ABCEXTENT__;
    }
    abcValues = Abc::TypedArraySample<__ABCTRAITS__>((const __ABCTYPE__ *)packed, values.size());
  }

  this_->handle = new PtrHandle<AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(new AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample(abcValues, (AbcG::GeometryScope)abcScope), true, packed, packedSize);

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesAndScope")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:19:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesIndicesAndScope(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::__KLTYPE__ > >::INParam values,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > >::INParam indices,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam scope
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesIndicesAndScope")

  unsigned int abcScope = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(scope, abcScope)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesIndicesAndScope. unable to convert: scope");
    return;
  }

  Abc::TypedArraySample<__ABCTRAITS__> abcValues;
  size_t packedSize = 0;
  __ABCBASETYPE__ * packed = NULL;
  if(values.size() > 0)
  {
    packedSize = sizeof(__ABCBASETYPE__) * values.size() * __ABCEXTENT__;
    packed = (__ABCBASETYPE__ *)malloc(packedSize);
    size_t offset = 0;
    for(size_t i=0;i<values.size();i++)
    {
      const KL::__KLTYPE__ & value = values[i];
      __KLUNPACK__
      offset += __ABCEXTENT__;
    }
    abcValues = Abc::TypedArraySample<__ABCTRAITS__>((const __ABCTYPE__ *)packed, values.size());
  }

  Abc::TypedArraySample<Abc::Uint32TPTraits> abcIndices;
  if(indices.size() > 0)
    abcIndices = Abc::TypedArraySample<Abc::Uint32TPTraits>((const Abc::uint32_t *)&indices[0], indices.size());

  this_->handle = new PtrHandle<AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(new AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample(abcValues, abcIndices, (AbcG::GeometryScope)abcScope), true, packed, packedSize);

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_constructFromValuesIndicesAndScope")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:21:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_setVals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::__KLTYPE__ > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_setVals")

  AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample * abcThis_;
  if(!conv_from_AbcBasePtr<KL::AlembicO__KLTYPE____PRECISION__GeomParamSample, AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(this_, abcThis_)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_setVals. unable to convert: this_");
    return;
  }

  PtrHandle<AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample> * wrappedHandle = (PtrHandle<AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>*)this_->handle;

  Abc::TypedArraySample<__ABCTRAITS__> abcValues;
  if(values.size() > 0)
  {
    size_t packedSize = sizeof(__ABCBASETYPE__) * values.size() * __ABCEXTENT__;
    __ABCBASETYPE__ * packed = (__ABCBASETYPE__ *)wrappedHandle->tmp(packedSize);
    size_t offset = 0;
    for(size_t i=0;i<values.size();i++)
    {
      const KL::__KLTYPE__ & value = values[i];
      __KLUNPACK__
      offset += __ABCEXTENT__;
    }
    abcValues = Abc::TypedArraySample<__ABCTRAITS__>((const __ABCTYPE__ *)packed, values.size());
  }

  abcThis_->setVals(abcValues);

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_setVals")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:22:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_getVals(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::__KLTYPE__ > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_getVals")

  AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample * abcThis_;
  if(!conv_from_AbcBasePtr<KL::AlembicO__KLTYPE____PRECISION__GeomParamSample, AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(this_, abcThis_)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_getVals. unable to convert: this_");
    return;
  }

  Abc::TypedArraySample<__ABCTRAITS__> abc_result = abcThis_->getVals();
  if(abc_result.size() == 0)
    return;
  size_t offset = 0;
  _result.resize(abc_result.size());
  __ABCBASETYPE__ * packed = (__ABCBASETYPE__ *)abc_result.getData();
  for(size_t i=0;i<_result.size();i++)
  {
    __KLPACK__
    offset += __ABCEXTENT__;
  }

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_getVals")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:23:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_setIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > >::INParam indices
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_setIndices")

  AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample * abcThis_;
  if(!conv_from_AbcBasePtr<KL::AlembicO__KLTYPE____PRECISION__GeomParamSample, AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(this_, abcThis_)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_setIndices. unable to convert: this_");
    return;
  }

  Abc::TypedArraySample<Abc::Uint32TPTraits> abcIndices;
  if(indices.size() > 0)
    abcIndices = Abc::TypedArraySample<Abc::Uint32TPTraits>((const Abc::uint32_t *)&indices[0], indices.size());
  abcThis_->setIndices(abcIndices);

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_setIndices")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:24:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_getIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::UInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_getIndices")

  AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample * abcThis_;
  if(!conv_from_AbcBasePtr<KL::AlembicO__KLTYPE____PRECISION__GeomParamSample, AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(this_, abcThis_)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_getIndices. unable to convert: this_");
    return;
  }

  Abc::TypedArraySample<Abc::Uint32TPTraits> abcIndices = abcThis_->getIndices();
  if(abcIndices.size() == 0)
    return;
  _result = KL::ExternalArray<KL::UInt32>((KL::UInt32*)abcIndices.getData(), abcIndices.size());

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_getIndices")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:25:1
FABRIC_EXT_EXPORT void AlembicO__KLTYPE____PRECISION__GeomParamSample_setScope(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam scope
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_setScope")

  unsigned int abcScope = 0;
  if(!conv_from_baseType<KL::UInt32, unsigned int>(scope, abcScope)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_setScope. unable to convert: scope");
    return;
  }

  AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample * abcThis_;
  if(!conv_from_AbcBasePtr<KL::AlembicO__KLTYPE____PRECISION__GeomParamSample, AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(this_, abcThis_)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_setScope. unable to convert: this_");
    return;
  }

  abcThis_->setScope((AbcG::GeometryScope)abcScope);

  ALEMBIC_CATCH_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_setScope")
}

// Defined at build\Windows\x86_64\Release\Native\Exts\Builtin\Alembic/O__KLTYPE____PRECISION__GeomParamSample.kl:26:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicO__KLTYPE____PRECISION__GeomParamSample_getScope(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicO__KLTYPE____PRECISION__GeomParamSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicO__KLTYPE____PRECISION__GeomParamSample_getScope")

  AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample * abcThis_;
  if(!conv_from_AbcBasePtr<KL::AlembicO__KLTYPE____PRECISION__GeomParamSample, AbcG::OTypedGeomParam<__ABCTRAITS__>::Sample>(this_, abcThis_)){
    setError("Error in AlembicO__KLTYPE____PRECISION__GeomParamSample_getScope. unable to convert: this_");
    return 0;
  }

  return abcThis_->getScope();

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicO__KLTYPE____PRECISION__GeomParamSample_getScope", 0)
}

