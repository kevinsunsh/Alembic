////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicINuPatchSchema_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at INuPatchSchema.kl:9:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_construct")

  this_->handle = NULL;
  
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_construct")
}

// Defined at INuPatchSchema.kl:10:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_free")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::INuPatchSchema)
  
  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_free")
}

// Defined at INuPatchSchema.kl:11:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSchema_valid(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_valid")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    return false;
  }
  bool abc_result = abcThis_->valid();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_valid", false)
}

// Defined at INuPatchSchema.kl:14:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicINuPatchSchema_getTopologyVariance(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getTopologyVariance")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getTopologyVariance. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getTopologyVariance();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_getTopologyVariance", 0)
}

// Defined at INuPatchSchema.kl:15:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSchema_isConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_isConstant")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_isConstant. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->isConstant();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_isConstant", false)
}

// Defined at INuPatchSchema.kl:16:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_get(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSample >::IOParam sample,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicISampleSelector >::INParam ss
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_get")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_get. unable to convert: this_");
    return;
  }
  AbcG::INuPatchSchema::Sample * abcSample = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(sample, abcSample)){
    setError("Error in AlembicINuPatchSchema_get. unable to convert: sample");
    return;
  }
  Abc::ISampleSelector* abcSs = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicISampleSelector, Abc::ISampleSelector>(ss, abcSs)){
    setError("Error in AlembicINuPatchSchema_get. unable to convert: ss");
    return;
  }
  abcThis_->get(*abcSample, *abcSs);
  conv_to_AbcBasePtr<KL::AlembicINuPatchSample, AbcG::INuPatchSchema::Sample>(abcSample, sample);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_get")
}

// Defined at INuPatchSchema.kl:18:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getTimeSampling(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicTimeSampling >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getTimeSampling")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getTimeSampling. unable to convert: this_");
    return;
  }
  Abc::TimeSamplingPtr abc_result = abcThis_->getTimeSampling();
  conv_to_AbcBase<KL::AlembicTimeSampling, Abc::TimeSamplingPtr>(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getTimeSampling")
}

// Defined at INuPatchSchema.kl:19:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicINuPatchSchema_getNumSamples(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getNumSamples")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getNumSamples. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->getNumSamples();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_getNumSamples", 0)
}

// Defined at INuPatchSchema.kl:20:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getArbGeomParams(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getArbGeomParams")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getArbGeomParams. unable to convert: this_");
    return;
  }
  if(!abcThis_->getArbGeomParams().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getArbGeomParams());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getArbGeomParams")
}

// Defined at INuPatchSchema.kl:21:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getUserProperties(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicICompoundProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getUserProperties")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getUserProperties. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUserProperties().valid())
    return;
  Abc::ICompoundProperty* abc_result = new Abc::ICompoundProperty(abcThis_->getUserProperties());
  conv_to_AbcBasePtr<KL::AlembicICompoundProperty, Abc::ICompoundProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getUserProperties")
}

// Defined at INuPatchSchema.kl:22:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getChildBoundsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIScalarProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getChildBoundsProperty")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getChildBoundsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getChildBoundsProperty().valid())
    return;
  Abc::IScalarProperty* abc_result = new Abc::IScalarProperty(abcThis_->getChildBoundsProperty());
  conv_to_AbcBasePtr<KL::AlembicIScalarProperty, Abc::IScalarProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getChildBoundsProperty")
}

// Defined at INuPatchSchema.kl:23:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getPositionsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getPositionsProperty")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getPositionsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getPositionsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getPositionsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getPositionsProperty")
}

// Defined at INuPatchSchema.kl:24:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getUKnotsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getUKnotsProperty")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getUKnotsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUKnotsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getUKnotsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getUKnotsProperty")
}

// Defined at INuPatchSchema.kl:25:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getVKnotsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getVKnotsProperty")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getVKnotsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getVKnotsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getVKnotsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getVKnotsProperty")
}

// Defined at INuPatchSchema.kl:26:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getVelocitiesProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getVelocitiesProperty")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getVelocitiesProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getVelocitiesProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getVelocitiesProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getVelocitiesProperty")
}

// Defined at INuPatchSchema.kl:27:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getPositionWeightsProperty(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIArrayProperty >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getPositionWeightsProperty")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getPositionWeightsProperty. unable to convert: this_");
    return;
  }
  if(!abcThis_->getPositionWeightsProperty().valid())
    return;
  Abc::IArrayProperty* abc_result = new Abc::IArrayProperty(abcThis_->getPositionWeightsProperty());
  conv_to_AbcBasePtr<KL::AlembicIArrayProperty, Abc::IArrayProperty>(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getPositionWeightsProperty")
}

// Defined at INuPatchSchema.kl:28:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getUVsParam(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIVec2VfGeomParam >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getUVsParam")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getUVsParam. unable to convert: this_");
    return;
  }
  if(!abcThis_->getUVsParam().valid())
    return;
  AbcG::ITypedGeomParam<Abc::V2fTPTraits> * abc_result = new AbcG::ITypedGeomParam<Abc::V2fTPTraits> (abcThis_->getUVsParam());
  conv_to_AbcBasePtr<KL::AlembicIVec2VfGeomParam, AbcG::ITypedGeomParam<Abc::V2fTPTraits> >(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getUVsParam")
}

// Defined at INuPatchSchema.kl:29:1
FABRIC_EXT_EXPORT void AlembicINuPatchSchema_getNormalsParam(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicIVec3NfGeomParam >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_getNormalsParam")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_getNormalsParam. unable to convert: this_");
    return;
  }
  if(!abcThis_->getNormalsParam().valid())
    return;
  AbcG::ITypedGeomParam<Abc::N3fTPTraits> * abc_result = new AbcG::ITypedGeomParam<Abc::N3fTPTraits> (abcThis_->getNormalsParam());
  conv_to_AbcBasePtr<KL::AlembicIVec3NfGeomParam, AbcG::ITypedGeomParam<Abc::N3fTPTraits> >(abc_result, _result, true);

  ALEMBIC_CATCH_STATEMENT("AlembicINuPatchSchema_getNormalsParam")
}

// Defined at INuPatchSchema.kl:30:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSchema_hasTrimCurve(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_hasTrimCurve")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_hasTrimCurve. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->hasTrimCurve();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_hasTrimCurve", false)
}

// Defined at INuPatchSchema.kl:31:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSchema_trimCurveTopologyIsHomogenous(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_trimCurveTopologyIsHomogenous")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_trimCurveTopologyIsHomogenous. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->trimCurveTopologyIsHomogenous();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_trimCurveTopologyIsHomogenous", false)
}

// Defined at INuPatchSchema.kl:32:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicINuPatchSchema_trimCurveTopologyIsConstant(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicINuPatchSchema >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicINuPatchSchema_trimCurveTopologyIsConstant")

  AbcG::INuPatchSchema* abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicINuPatchSchema, AbcG::INuPatchSchema>(this_, abcThis_)){
    setError("Error in AlembicINuPatchSchema_trimCurveTopologyIsConstant. unable to convert: this_");
    return false;
  }
  bool abc_result = abcThis_->trimCurveTopologyIsConstant();
  KL::Boolean _result;
  conv_to_baseType<KL::Boolean, bool>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicINuPatchSchema_trimCurveTopologyIsConstant", false)
}
