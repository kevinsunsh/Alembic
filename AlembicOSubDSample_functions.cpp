////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicOSubDSample_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at OSubDSample.kl:9:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_construct")

  construct_AbcBasePtr(AbcG::OSubDSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_construct")
}

// Defined at OSubDSample.kl:10:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_free")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::OSubDSchema::Sample)
  
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_free")
}

// Defined at OSubDSample.kl:12:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getPositions")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getPositions. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::P3fArraySample, KL::Vec3, getPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getPositions")
}

// Defined at OSubDSample.kl:13:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setPositions(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setPositions")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setPositions. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::P3fArraySample, Abc::V3f, setPositions)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setPositions")
}

// Defined at OSubDSample.kl:14:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getFaceIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getFaceIndices")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getFaceIndices. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getFaceIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getFaceIndices")
}

// Defined at OSubDSample.kl:15:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setFaceIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setFaceIndices")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setFaceIndices. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, Abc::int32_t, setFaceIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setFaceIndices")
}

// Defined at OSubDSample.kl:16:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getFaceCounts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getFaceCounts")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getFaceCounts. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getFaceCounts)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getFaceCounts")
}

// Defined at OSubDSample.kl:17:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setFaceCounts(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setFaceCounts")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setFaceCounts. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, Abc::int32_t, setFaceCounts)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setFaceCounts")
}

// Defined at OSubDSample.kl:18:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicOSubDSample_getFaceVaryingInterpolateBoundary(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getFaceVaryingInterpolateBoundary")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getFaceVaryingInterpolateBoundary. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getFaceVaryingInterpolateBoundary();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOSubDSample_getFaceVaryingInterpolateBoundary", 0)
}

// Defined at OSubDSample.kl:19:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setFaceVaryingInterpolateBoundary(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam i
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setFaceVaryingInterpolateBoundary")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setFaceVaryingInterpolateBoundary. unable to convert: this_");
    return;
  }
  int abcI = 0;
  if(!conv_from_baseType<KL::SInt32, int>(i, abcI)){
    setError("Error in AlembicOSubDSample_setFaceVaryingInterpolateBoundary. unable to convert: i");
    return;
  }
  abcThis_->setFaceVaryingInterpolateBoundary(abcI);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setFaceVaryingInterpolateBoundary")
}

// Defined at OSubDSample.kl:20:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicOSubDSample_getFaceVaryingPropagateCorners(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getFaceVaryingPropagateCorners")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getFaceVaryingPropagateCorners. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getFaceVaryingPropagateCorners();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOSubDSample_getFaceVaryingPropagateCorners", 0)
}

// Defined at OSubDSample.kl:21:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setFaceVaryingPropagateCorners(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam i
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setFaceVaryingPropagateCorners")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setFaceVaryingPropagateCorners. unable to convert: this_");
    return;
  }
  int abcI = 0;
  if(!conv_from_baseType<KL::SInt32, int>(i, abcI)){
    setError("Error in AlembicOSubDSample_setFaceVaryingPropagateCorners. unable to convert: i");
    return;
  }
  abcThis_->setFaceVaryingPropagateCorners(abcI);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setFaceVaryingPropagateCorners")
}

// Defined at OSubDSample.kl:22:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 AlembicOSubDSample_getInterpolateBoundary(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getInterpolateBoundary")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getInterpolateBoundary. unable to convert: this_");
    return 0;
  }
  int abc_result = abcThis_->getInterpolateBoundary();
  KL::SInt32 _result;
  conv_to_baseType<KL::SInt32, int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicOSubDSample_getInterpolateBoundary", 0)
}

// Defined at OSubDSample.kl:23:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setInterpolateBoundary(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::SInt32 >::INParam i
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setInterpolateBoundary")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setInterpolateBoundary. unable to convert: this_");
    return;
  }
  int abcI = 0;
  if(!conv_from_baseType<KL::SInt32, int>(i, abcI)){
    setError("Error in AlembicOSubDSample_setInterpolateBoundary. unable to convert: i");
    return;
  }
  abcThis_->setInterpolateBoundary(abcI);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setInterpolateBoundary")
}

// Defined at OSubDSample.kl:24:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getCreaseIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getCreaseIndices")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getCreaseIndices. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getCreaseIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getCreaseIndices")
}

// Defined at OSubDSample.kl:25:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCreaseIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCreaseIndices")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCreaseIndices. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, KL::SInt32, setCreaseIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCreaseIndices")
}

// Defined at OSubDSample.kl:26:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getCreaseLengths(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getCreaseLengths")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getCreaseLengths. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getCreaseLengths)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getCreaseLengths")
}

// Defined at OSubDSample.kl:27:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCreaseLengths(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCreaseLengths")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCreaseLengths. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, KL::SInt32, setCreaseLengths)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCreaseLengths")
}

// Defined at OSubDSample.kl:28:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getCreaseSharpnesses(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getCreaseSharpnesses")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getCreaseSharpnesses. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getCreaseSharpnesses)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getCreaseSharpnesses")
}

// Defined at OSubDSample.kl:29:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCreaseSharpnesses(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCreaseSharpnesses")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCreaseSharpnesses. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::FloatArraySample, KL::Float32, setCreaseSharpnesses)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCreaseSharpnesses")
}

// Defined at OSubDSample.kl:30:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCreases2Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam indices,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam lengths
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCreases2Args")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCreases2Args. unable to convert: this_");
    return;
  }

  Abc::Int32ArraySample indicesSample;
  if(indices.size() > 0)
    indicesSample = Abc::Int32ArraySample((const Abc::int32_t *)&indices[0], indices.size());
  Abc::Int32ArraySample lengthsSample;
  if(lengths.size() > 0)
    lengthsSample = Abc::Int32ArraySample((const Abc::int32_t *)&lengths[0], lengths.size());
  abcThis_->setCreases(indicesSample, lengthsSample);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCreases2Args")
}

// Defined at OSubDSample.kl:31:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCreases3Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam indices,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam lengths,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam sharpnesses
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCreases3Args")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCreases3Args. unable to convert: this_");
    return;
  }

 Abc::Int32ArraySample indicesSample;
  if(indices.size() > 0)
    indicesSample = Abc::Int32ArraySample((const Abc::int32_t *)&indices[0], indices.size());
  Abc::Int32ArraySample lengthsSample;
  if(lengths.size() > 0)
    lengthsSample = Abc::Int32ArraySample((const Abc::int32_t *)&lengths[0], lengths.size());
  Abc::FloatArraySample sharpnessesSample;
  if(sharpnesses.size() > 0)
    sharpnessesSample = Abc::FloatArraySample((const Abc::float32_t *)&sharpnesses[0], sharpnesses.size());
  abcThis_->setCreases(indicesSample, lengthsSample, sharpnessesSample);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCreases3Args")
}

// Defined at OSubDSample.kl:32:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getCornerIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getCornerIndices")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getCornerIndices. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getCornerIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getCornerIndices")
}

// Defined at OSubDSample.kl:33:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCornerIndices(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCornerIndices")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCornerIndices. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, KL::SInt32, setCornerIndices)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCornerIndices")
}

// Defined at OSubDSample.kl:34:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getCornerSharpnesses(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getCornerSharpnesses")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getCornerSharpnesses. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::FloatArraySample, KL::Float32, getCornerSharpnesses)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getCornerSharpnesses")
}

// Defined at OSubDSample.kl:35:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCornerSharpnesses(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCornerSharpnesses")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCornerSharpnesses. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::FloatArraySample, KL::Float32, setCornerSharpnesses)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCornerSharpnesses")
}

// Defined at OSubDSample.kl:36:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setCorners2Args(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam indices,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Float32 > >::INParam sharpnesses
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setCorners2Args")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setCorners2Args. unable to convert: this_");
    return;
  }

  Abc::Int32ArraySample indicesSample;
  if(indices.size() > 0)
    indicesSample = Abc::Int32ArraySample((const Abc::int32_t *)&indices[0], indices.size());
  Abc::FloatArraySample sharpnessesSample;
  if(sharpnesses.size() > 0)
    sharpnessesSample = Abc::FloatArraySample((const Abc::float32_t *)&sharpnesses[0], sharpnesses.size());
  abcThis_->setCorners(indicesSample, sharpnessesSample);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setCorners2Args")
}

// Defined at OSubDSample.kl:37:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getHoles(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getHoles")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getHoles. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::Int32ArraySample, KL::SInt32, getHoles)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getHoles")
}

// Defined at OSubDSample.kl:38:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setHoles(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::SInt32 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setHoles")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setHoles. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::Int32ArraySample, KL::SInt32, setHoles)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setHoles")
}

// Defined at OSubDSample.kl:39:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getSubdivisionScheme(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getSubdivisionScheme")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getSubdivisionScheme. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->getSubdivisionScheme();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getSubdivisionScheme")
}

// Defined at OSubDSample.kl:40:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setSubdivisionScheme(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam value
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setSubdivisionScheme")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setSubdivisionScheme. unable to convert: this_");
    return;
  }
  std::string abcValue = "";
  if(!conv_from_String(value, abcValue)){
    setError("Error in AlembicOSubDSample_setSubdivisionScheme. unable to convert: value");
    return;
  }
  abcThis_->setSubdivisionScheme(abcValue);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setSubdivisionScheme")
}

// Defined at OSubDSample.kl:41:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getSelfBounds")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abc_result = abcThis_->getSelfBounds();
  conv_to_Box3(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getSelfBounds")
}

// Defined at OSubDSample.kl:42:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setSelfBounds(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Box3 >::INParam bounds
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setSelfBounds")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setSelfBounds. unable to convert: this_");
    return;
  }
  Abc::Box3d abcBounds;
  if(!conv_from_Box3(bounds, abcBounds)){
    setError("Error in AlembicOSubDSample_setSelfBounds. unable to convert: bounds");
    return;
  }
  abcThis_->setSelfBounds(abcBounds);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setSelfBounds")
}

// Defined at OSubDSample.kl:43:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getVelocities")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getVelocities. unable to convert: this_");
    return;
  }
  AlembicOExtractExternalArrayFromSample(Abc::V3fArraySample, KL::Vec3, getVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getVelocities")
}

// Defined at OSubDSample.kl:44:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setVelocities(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ExternalArray< Fabric::EDK::KL::Vec3 > >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setVelocities")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setVelocities. unable to convert: this_");
    return;
  }
  AlembicPackExternalArrayToSample(Abc::V3fArraySample, Abc::V3f, setVelocities)
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setVelocities")
}

// Defined at OSubDSample.kl:45:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_getUVs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec2VfGeomParamSample >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_getUVs")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_getUVs. unable to convert: this_");
    return;
  }

  AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample * abc_result = new AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample(abcThis_->getUVs());
  conv_to_AbcBasePtr<KL::AlembicOVec2VfGeomParamSample, AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample>(abc_result, _result, true);
    
  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_getUVs")
}

// Defined at OSubDSample.kl:46:1
FABRIC_EXT_EXPORT void AlembicOSubDSample_setUVs(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOSubDSample >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicOVec2VfGeomParamSample >::INParam values
)
{
  ALEMBIC_TRY_STATEMENT("AlembicOSubDSample_setUVs")

  AbcG::OSubDSchema::Sample * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOSubDSample, AbcG::OSubDSchema::Sample>(this_, abcThis_)){
    setError("Error in AlembicOSubDSample_setUVs. unable to convert: this_");
    return;
  }
  AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample * abcValues = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicOVec2VfGeomParamSample, AbcG::OTypedGeomParam<Abc::V2fTPTraits>::Sample>(values, abcValues)){
    setError("Error in AlembicOSubDSample_setUVs. unable to convert: values");
    return;
  }
  abcThis_->setUVs(*abcValues);

  ALEMBIC_CATCH_STATEMENT("AlembicOSubDSample_setUVs")
}
