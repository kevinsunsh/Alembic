/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by Fabric Engine Alembic Mapping Sconscript
////////////////////////////////////////////////////////////////

require Math;

object AlembicI__KLTYPE__Property {
  AlembicIScalarProperty prop;
};

function AlembicI__KLTYPE__Property(AlembicICompoundProperty parent, String name) {
  this.prop = AlembicIScalarProperty(parent, name);
}

function AlembicI__KLTYPE__Property(AlembicIScalarProperty prop) {
  this.prop = prop;
}

function AlembicIScalarProperty(AlembicI__KLTYPE__Property prop) {
  this = prop.prop;
}

function Boolean AlembicI__KLTYPE__Property.valid() {
  return this.prop.valid();
}

function AlembicI__KLTYPE__Property.reset!() {
  this.prop.reset();
}

function AlembicPropertyHeader AlembicI__KLTYPE__Property.getHeader() {
  return this.prop.getHeader();
}

function String AlembicI__KLTYPE__Property.getName() {
  return this.prop.getName();
}

function AlembicPropertyType AlembicI__KLTYPE__Property.getPropertyType() {
  return this.prop.getPropertyType();
}

function Boolean AlembicI__KLTYPE__Property.isScalar() {
  return this.prop.isScalar();
}

function Boolean AlembicI__KLTYPE__Property.isArray() {
  return this.prop.isArray();
}

function Boolean AlembicI__KLTYPE__Property.isCompound() {
  return this.prop.isCompound();
}

function Boolean AlembicI__KLTYPE__Property.isSimple() {
  return this.prop.isSimple();
}

function AlembicMetaData AlembicI__KLTYPE__Property.getMetaData() {
  return this.prop.getMetaData();
}

function AlembicDataType AlembicI__KLTYPE__Property.getDataType() {
  return this.prop.getDataType();
}

function AlembicTimeSampling AlembicI__KLTYPE__Property.getTimeSampling() {
  return this.prop.getTimeSampling();
}

function AlembicIObject AlembicI__KLTYPE__Property.getObject() {
  return this.prop.getObject();
}

function UInt32 AlembicI__KLTYPE__Property.getNumSamples() {
  return this.prop.getNumSamples();
}
function Boolean AlembicI__KLTYPE__Property.isConstant() {
  return this.prop.isConstant();
}
function AlembicICompoundProperty AlembicI__KLTYPE__Property.getParent() {
  return this.prop.getParent();
}

function __KLTYPE__ AlembicI__KLTYPE__Property.get(AlembicISampleSelector iSS) {
  AlembicDataType dt = this.getDataType();
  if(dt.getExtent() != __ABCEXTENT__) {
    setError('AlembicI__KLTYPE__Property.get: Extent != __ABCEXTENT__.');
    return __KLTYPE__();
  }
  Size offset = 0;
  switch(dt.getPod())
  {
    case Alembic_kInt8POD:
    {
      SInt8 packed[] = this.prop.getAsSInt8(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kInt16POD:
    {
      SInt16 packed[] = this.prop.getAsSInt16(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kInt32POD:
    {
      SInt32 packed[] = this.prop.getAsSInt32(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kInt64POD:
    {
      SInt64 packed[] = this.prop.getAsSInt64(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kUint8POD:
    {
      UInt8 packed[] = this.prop.getAsUInt8(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kUint16POD:
    {
      UInt16 packed[] = this.prop.getAsUInt16(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kUint32POD:
    {
      UInt32 packed[] = this.prop.getAsUInt32(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kUint64POD:
    {
      UInt64 packed[] = this.prop.getAsUInt64(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kFloat16POD:
    {
      Float32 packed[] = this.prop.getAsFloat16(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kFloat32POD:
    {
      Float32 packed[] = this.prop.getAsFloat32(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    case Alembic_kFloat64POD:
    {
      Float64 packed[] = this.prop.getAsFloat64(iSS);
      if(packed.size() != __ABCEXTENT__)
        setError('AlembicO__KLTYPE__Property.get: Packed values does not match extent, != __ABCEXTENT__.');
      else
        return __KLPACK__
      break;
    }
    default:
    {
      setError('AlembicO__KLTYPE__Property.get: Papsulated AlembicIScalarProperty has invalid POD.');
    }
  }
  return __KLTYPE__();
}

function __KLTYPE__ AlembicI__KLTYPE__Property.get() {
  return this.get(AlembicISampleSelector(0));
}
