////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
// USE COPY & PASTE TO MAKE USE OF THE FUNCTION IMPLEMENTATIONS!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.2
////////////////////////////////////////////////////////////////

#include "AlembicMetaData_functions.h"


#include "extension.h"
  

using namespace Fabric::EDK;


// Defined at MetaData.kl:9:1
FABRIC_EXT_EXPORT void AlembicMetaData_construct(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_construct")

  construct_AbcBasePtr(AbcG::MetaData)
  
  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_construct")
}

// Defined at MetaData.kl:10:1
FABRIC_EXT_EXPORT void AlembicMetaData_free(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_free")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    return;
  }
  free_AbcBasePtr(AbcG::MetaData)
  
  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_free")
}

// Defined at MetaData.kl:12:1
FABRIC_EXT_EXPORT void AlembicMetaData_deserialize(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam from
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_deserialize")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_deserialize. unable to convert: this_");
    return;
  }
  std::string abcFrom = "";
  if(!conv_from_String(from, abcFrom)){
    setError("Error in AlembicMetaData_deserialize. unable to convert: from");
    return;
  }
  abcThis_->deserialize(abcFrom);

  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_deserialize")
}

// Defined at MetaData.kl:13:1
FABRIC_EXT_EXPORT void AlembicMetaData_serialize(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_serialize")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_serialize. unable to convert: this_");
    return;
  }
  std::string abc_result = abcThis_->serialize();
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_serialize")
}

// Defined at MetaData.kl:14:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 AlembicMetaData_size(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_size")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_size. unable to convert: this_");
    return 0;
  }
  unsigned int abc_result = abcThis_->size();
  KL::UInt32 _result;
  conv_to_baseType<KL::UInt32, unsigned int>(abc_result, _result);
  return _result;

  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicMetaData_size", 0)
}

// Defined at MetaData.kl:15:1
FABRIC_EXT_EXPORT void AlembicMetaData_keys(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::VariableArray< Fabric::EDK::KL::String > >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_keys")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_keys. unable to convert: this_");
    return;
  }

  _result.resize(abcThis_->size());
  uint32_t offset = 0;
  for(Abc::MetaData::const_iterator it=abcThis_->begin();it!=abcThis_->end();it++)
    _result[offset++] = it->first.c_str();
    
  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_keys")
}

// Defined at MetaData.kl:16:1
FABRIC_EXT_EXPORT void AlembicMetaData_set(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam key,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam data
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_set")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_set. unable to convert: this_");
    return;
  }
  std::string abcKey = "";
  if(!conv_from_String(key, abcKey)){
    setError("Error in AlembicMetaData_set. unable to convert: key");
    return;
  }
  std::string abcData = "";
  if(!conv_from_String(data, abcData)){
    setError("Error in AlembicMetaData_set. unable to convert: data");
    return;
  }
  abcThis_->set(abcKey, abcData);

  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_set")
}

// Defined at MetaData.kl:17:1
FABRIC_EXT_EXPORT void AlembicMetaData_setUnique(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam key,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam data
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_setUnique")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_setUnique. unable to convert: this_");
    return;
  }
  std::string abcKey = "";
  if(!conv_from_String(key, abcKey)){
    setError("Error in AlembicMetaData_setUnique. unable to convert: key");
    return;
  }
  std::string abcData = "";
  if(!conv_from_String(data, abcData)){
    setError("Error in AlembicMetaData_setUnique. unable to convert: data");
    return;
  }
  abcThis_->setUnique(abcKey, abcData);

  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_setUnique")
}

// Defined at MetaData.kl:18:1
FABRIC_EXT_EXPORT void AlembicMetaData_get(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam key
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_get")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_get. unable to convert: this_");
    return;
  }
  std::string abcKey = "";
  if(!conv_from_String(key, abcKey)){
    setError("Error in AlembicMetaData_get. unable to convert: key");
    return;
  }
  std::string abc_result = abcThis_->get(abcKey);
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_get")
}

// Defined at MetaData.kl:19:1
FABRIC_EXT_EXPORT void AlembicMetaData_getRequired(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam key
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_getRequired")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_getRequired. unable to convert: this_");
    return;
  }
  std::string abcKey = "";
  if(!conv_from_String(key, abcKey)){
    setError("Error in AlembicMetaData_getRequired. unable to convert: key");
    return;
  }
  std::string abc_result = abcThis_->getRequired(abcKey);
  conv_to_String(abc_result, _result);

  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_getRequired")
}

// Defined at MetaData.kl:20:1
FABRIC_EXT_EXPORT void AlembicMetaData_append(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam metaData
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_append")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_append. unable to convert: this_");
    return;
  }
  Abc::MetaData * abcMetaData = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(metaData, abcMetaData)){
    setError("Error in AlembicMetaData_append. unable to convert: metaData");
    return;
  }
  abcThis_->append(*abcMetaData);
  
  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_append")
}

// Defined at MetaData.kl:21:1
FABRIC_EXT_EXPORT void AlembicMetaData_appendUnique(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam metaData
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_appendUnique")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_appendUnique. unable to convert: this_");
    return;
  }
  Abc::MetaData * abcMetaData = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(metaData, abcMetaData)){
    setError("Error in AlembicMetaData_appendUnique. unable to convert: metaData");
    return;
  }
  abcThis_->appendUnique(*abcMetaData);
  
  ALEMBIC_CATCH_STATEMENT("AlembicMetaData_appendUnique")
}

// Defined at MetaData.kl:22:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicMetaData_matches(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam metaData
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_matches")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_matches. unable to convert: this_");
    return false;
  }
  Abc::MetaData * abcMetaData = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(metaData, abcMetaData)){
    setError("Error in AlembicMetaData_matches. unable to convert: metaData");
    return false;
  }
  return abcThis_->matches(*abcMetaData);
  
  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicMetaData_matches", false)
}

// Defined at MetaData.kl:23:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicMetaData_matchesOverlap(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam metaData
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_matchesOverlap")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_matchesOverlap. unable to convert: this_");
    return false;
  }
  Abc::MetaData * abcMetaData = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(metaData, abcMetaData)){
    setError("Error in AlembicMetaData_matchesOverlap. unable to convert: metaData");
    return false;
  }
  return abcThis_->matchesOverlap(*abcMetaData);
  
  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicMetaData_matchesOverlap", false)
}

// Defined at MetaData.kl:24:1
FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean AlembicMetaData_matchesExactly(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::AlembicMetaData >::INParam metaData
)
{
  ALEMBIC_TRY_STATEMENT("AlembicMetaData_matchesExactly")

  Abc::MetaData * abcThis_ = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(this_, abcThis_)){
    setError("Error in AlembicMetaData_matchesExactly. unable to convert: this_");
    return false;
  }
  Abc::MetaData * abcMetaData = NULL;
  if(!conv_from_AbcBasePtr<KL::AlembicMetaData, Abc::MetaData>(metaData, abcMetaData)){
    setError("Error in AlembicMetaData_matchesExactly. unable to convert: metaData");
    return false;
  }
  return abcThis_->matchesExactly(*abcMetaData);
  
  ALEMBIC_CATCH_STATEMENT_RETURN("AlembicMetaData_matchesExactly", false)
}
